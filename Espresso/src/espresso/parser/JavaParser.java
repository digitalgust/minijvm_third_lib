/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
package espresso.parser;

import java.util.Vector;
import java.util.Enumeration;
import java.io.InputStream;
import java.math.BigInteger;

import espresso.Espresso;
import espresso.util.*;
import espresso.syntaxtree.*;
import espresso.classfile.Constants;
import espresso.parser.JavaImportManager;

public class JavaParser implements JavaParserConstants {

    /**
     * The name of the default package
     */
    final static String DEFAULT_PACKAGE = "";

    /**
     * The name of the default super class
     */
    final static String DEFAULT_SUPER = "java.lang.Object";

    /**
     * Symbol of the package that corresponds to the class being defined or a
     * default if no package declaration parsed.
     */
    Symbol packName_d = new Symbol(DEFAULT_PACKAGE);

    /**
     * Name of the class (and of its superclass) being parsed.
     */
    Symbol className_d = null;
    Symbol superName_d = new Symbol(DEFAULT_SUPER);

    /**
     * This is the compiler's symbol table.
     */
    SymbolTable symbolTable_d = null;

    /**
     * This is the compiler's import manager.
     */
    JavaImportManager importMgr_d = null;

    /**
     * The name of the method being parsed.
     */
    Symbol methodName_d = null;

    /**
     * A pointer to the method declaration node of the method being parsed. This
     * is used to create new MethodExpNodes.
     */
    MethodDeclarationNode methodNode_d = null;

    /**
     * During parsing, non-static initializers are collected and at the end
     * added to each constructor.
     */
    BlockNode fieldInit_d = new BlockNode();

    /**
     * During parsing, static initializers are collected and at the end added to
     * <clinit>.
     */
    BlockNode staticInit_d = new BlockNode();

    /**
     * A String vector containing all the errors found during parsing.
     */
    Vector errors_d = null;

    /**
     * A counter used to keep track of the different scopes within a method.
     */
    IntegerStream counter_d = new IntegerStream();

    /**
     * A stack used together with the counter to keep track of the scopes within
     * a method.
     */
    IntegerStack scopes_d = new IntegerStack();

    /**
     * A stack used to match labels in break and continue statements with their
     * corresponding labeled nodes.
     */
    IntegerStack labels_d = new IntegerStack();

    /**
     * Keep track of references to forward types.
     */
    Vector forwardTypes_d = new Vector();

    /**
     * The pointer to the AST root node.
     */
    CompilationUnitNode root_d = null;

    /**
     * The main constructor.
     */
    public JavaParser(InputStream stream, JavaImportManager importMgr,
            SymbolTable symbolTable, Vector errors) {
        this(stream);
        errors_d = errors;
        importMgr_d = importMgr;
        symbolTable_d = symbolTable;
    }

    /**
     * This method is called to start parsing a file.
     */
    public CompilationUnitNode parseProgram() throws ParseException {
        root_d = CompilationUnit();
        checkCloseProgram();
        return (errors_d.size() > 0) ? null : root_d;
    }

    /**
     * Sets source coordinates for error reporting.
     */
    public void recordSourceCoord(SyntaxTreeNode node, Token token) {
        if (node != null) {
            node.line_d = token.beginLine;
        }
    }

    /**
     * Verify that any forward references to types were resolved.
     */
    private void checkCloseProgram() {
        int n = forwardTypes_d.size();
        for (int i = 0; i < n; i++) {
            Symbol tname = (Symbol) forwardTypes_d.elementAt(i);
            if (symbolTable_d.lookupType(tname) == null) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.NOTCLASS_ERR, 0);
                errors_d.addElement(error.toString(tname.toString()));
            }
        }
    }

    /**
     * Adds a default constructor when needed.
     */
    private void addDefaultConstructor(ClassDeclarationNode node) {
        boolean defined = false;
        int n = node.body_d.size();

        for (int i = 0; i < n; i++) {
            ClassBodyDeclarationNode cbnode = (ClassBodyDeclarationNode) node.body_d.elementAt(i);
            if (cbnode instanceof ConstructorDeclarationNode) {
                defined = true;
                break;
            }
        }

        if (!defined) {
            ConstructorDeclarationNode cnode = new ConstructorDeclarationNode();
            cnode.name_d = new Symbol(className_d, cnode.name_d);           // adds <init>
            cnode.formals_d = cnode.exceptions_d = new Vector(1);
            cnode.encodeType();
            cnode.block_d = new BlockNode();
            cnode.accessFlags_d = Constants.ACC_PUBLIC;
            cnode.consInvocation_d = new ConstructorInvocationNode();
            cnode.consInvocation_d.name_d = superName_d;                            // call to super()

            // Add it to the class and the symbol table
            symbolTable_d.addMethod(cnode.name_d, cnode);
            node.body_d.addElement(cnode);
        }
    }

    /**
     * Adds a <clinit> if static initializations were collected along the way.
     */
    private void createStaticInit(ClassDeclarationNode node) {
        int n = staticInit_d.numberOfStatments();

        if (n > 0) {
            MethodDeclarationNode mnode = new MethodDeclarationNode();
            mnode.name_d = new Symbol(className_d, "<clinit>");
            mnode.formals_d = mnode.exceptions_d = new Vector(1);
            mnode.type_d = Type.Void;
            mnode.encodeType();
            mnode.block_d = new BlockNode();
            mnode.accessFlags_d = Constants.ACC_STATIC;

            // Add it to the class and the symbol table
            symbolTable_d.addMethod(mnode.name_d, mnode);
            node.body_d.addElement(mnode);

            for (int j = 0; j < n; j++) {
                mnode.block_d.addStatement(staticInit_d.statementAt(j));
            }
            staticInit_d.reset();
        }
    }

    /**
     * Copies all field initializers collected during paring to each of the
     * constructors found.
     */
    private void copyInitializers(ClassDeclarationNode node) {
        int n = node.body_d.size();

        for (int i = 0; i < n; i++) {
            ClassBodyDeclarationNode cbnode
                    = (ClassBodyDeclarationNode) node.body_d.elementAt(i);

            if (cbnode instanceof ConstructorDeclarationNode) {
                ConstructorDeclarationNode cnode
                        = (ConstructorDeclarationNode) cbnode;

                int m = fieldInit_d.numberOfStatments();
                for (int j = 0; j < m; j++) {
                    StatementExpNode snode
                            = (StatementExpNode) fieldInit_d.statementAt(j);
                    AssignmentNode anode = (AssignmentNode) snode.expression_d;

                    // Update the methodNode_d pointer of the field exp
                    ((FieldExpNode) anode.left_d).methodNode_d = cnode;
                    cnode.fieldInit_d.addStatement(snode);
                }
            }
        }
        fieldInit_d.reset();
    }

    /**
     * Determines whether a given unqualified name refers to a local, a
     * parameter, a field or a type. The symbol table, the name of the method
     * being parsed, the stack of scopes and the import declarations are used
     * for this purpose.
     */
    private ExpressionNode classifySimpleName(Symbol name) {
        SyntaxTreeNode aux = null;
        ExpressionNode result = null;

        // First search for a local variable
        Symbol nname = null;
        Integer scope = null;
        IntegerStack st = (IntegerStack) scopes_d.clone();

        while (result == null && !st.empty()) {
            if (st.peek() == null) {
                int debug = 1;
            }
            scope = st.popInteger();
            nname = new Symbol(methodName_d, scope, name);

            aux = symbolTable_d.lookupLocal(nname);
            if (aux != null) {
                result = new LocalExpNode(nname);
            }
        }

        // Inspect the last scope to see if it was a parameter
        if (result == null && scope != null) {
            aux = symbolTable_d.lookupFormal(nname);
            if (aux != null) {
                result = new FormalExpNode(nname);
            }
        }

        // Look for a field in the class or any super type
        if (result == null) {
            ClassType ctype = Type.createClassType(className_d);

            try {
                nname = ctype.findField(name);
                if (nname != null) {
                    String path = nname.pathName();
                    if (path.equals(className_d.toString())) {
                        result = new FieldExpNode(new ThisExpNode(className_d), name,
                                methodNode_d);
                    } else {
                        // Keep the name of the class where the field was found
                        result = new FieldExpNode(new SuperExpNode(path), name,
                                methodNode_d);
                    }
                }
            } catch (AmbiguousName e) {
                // TODO -> push an error
            }
        }

        // Let us now check if it is a type
        if (result == null) {
            result = findTypeName(name, false);
        }

        // If everything else failed, then it must be a package name
        return (result == null) ? new PackageExpNode(name) : result;
    }

    /**
     * Check if the name refers to a valid type (class or interface) by using
     * the import declarations. The name may can be qualified or not.
     */
    private ExpressionNode findTypeName(Symbol name, boolean forward) {
        SyntaxTreeNode aux = null;
        ExpressionNode result = null;

        // Check current class, super class and single-type-imports
        if (name.equals(className_d.baseName()) || name.equals(className_d)) {
            result = new TypeExpNode(className_d);
        } else if (name.equals(superName_d.baseName()) || name.equals(superName_d)) {
            result = new TypeExpNode(superName_d);
        } else {
            int size = root_d.imports_d.size();

            for (int i = 0; i < size; i++) {
                Symbol imp = (Symbol) root_d.imports_d.elementAt(i);
                String baseName = imp.baseName();

                if (name.equals(imp.baseName()) || name.equals(imp)) {
                    result = new TypeExpNode(imp);
                }
            }
        }

        // Types in the same CU have implicit imports. 
        if (result == null) {
            int size = root_d.types_d.size();

            for (int i = 0; i < size; i++) {
                TypeDeclarationNode node
                        = (TypeDeclarationNode) root_d.types_d.elementAt(i);
                String baseName = node.name_d.baseName();

                if (name.equals(baseName) || name.equals(node.name_d)) {

                    // Check to see if the name is ambiguous
                    if (result != null) {
                        ErrorMsg error = new ErrorMsg(ErrorMsg.AMBITYPE_ERR,
                                token.beginLine);
                        errors_d.addElement(error.toString(baseName));
                    } else {
                        result = new TypeExpNode(node.name_d);
                    }
                }
            }
        }

        // Finally we check for import-on-demand and fully qualified names
        if (result == null) {
            try {
                Symbol fullName = null;

                if (name.isQualified()) {
                    if (importMgr_d.existsClass(name)) {
                        fullName = name;
                    } else {
                        ErrorMsg error = new ErrorMsg(ErrorMsg.NOTCLASS_ERR,
                                token.beginLine);
                        errors_d.addElement(error.toString(name.toString()));
                    }
                } else {
                    fullName = importMgr_d.fullyQualifyName(name);
                }

                if (fullName != null) {
                    result = new TypeExpNode(fullName);
                    importMgr_d.readClassFile(fullName, false);
                }
            } catch (Exception e) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.AMBITYPE_ERR,
                        token.beginLine);
                errors_d.addElement(error.toString(e.getMessage()));
            }
        }

        // Add a forward ref if this is supposed to be a type
        if (result == null && forward) {
            Symbol fullName = new Symbol(packName_d, name);
            forwardTypes_d.addElement(fullName);                    // keep track of it
            result = new TypeExpNode(fullName);
        }

        return result;
    }

    /**
     * Adds the local vars to the symbol table
     */
    private void declareLocalVars(LocalVarDeclarationNode node) {
        VariableDeclaratorNode var;
        LocalVarDeclarationNode aux = null;
        Integer scope = scopes_d.peekInteger();

        int n = node.locals_d.size();
        for (int i = 0; i < n; i++) {
            var = (VariableDeclaratorNode) node.locals_d.elementAt(i);

            // Fix local var name adding scope
            var.name_d = new Symbol(methodName_d, scope, var.name_d.baseName());

            // First look for a param with the same name
            FormalParameterNode fmt
                    = symbolTable_d.lookupFormal(var.name_d);

            if (fmt == null) {

                // Check if this var is shadowing another var
                IntegerStack st = (IntegerStack) scopes_d.clone();

                while (!st.empty()) {
                    Integer nscope = st.popInteger();
                    Symbol name = new Symbol(methodName_d, nscope,
                            var.name_d.baseName());

                    aux = symbolTable_d.lookupLocal(name);
                    if (aux != null) {
                        ErrorMsg error = new ErrorMsg(ErrorMsg.LOCALDEF_ERR,
                                token.beginLine);
                        errors_d.addElement(error.toString(var.name_d.baseName()));
                    }
                }

                symbolTable_d.addLocal(var.name_d, node);
            } else {
                ErrorMsg error = new ErrorMsg(ErrorMsg.LOCALDEF_ERR,
                        token.beginLine);
                errors_d.addElement(error.toString(var.name_d.baseName()));
            }
        }
    }

    /**
     * Used to load classes found in ClassDeclaration and InterFaceDeclaration
     */
    private void readClassesUpToRoot(Symbol name, SyntaxTreeNode node) {

        // First check if defined in the same CU
        int size = root_d.types_d.size();
        for (int i = 0; i < size; i++) {
            TypeDeclarationNode tnode
                    = (TypeDeclarationNode) root_d.types_d.elementAt(i);
            String baseName = tnode.name_d.baseName();

            if (name.equals(baseName) || name.equals(tnode.name_d)) {
                return;                         // no need to load it !
            }
        }

        // Now check if they are forward refs
        size = forwardTypes_d.size();
        for (int i = 0; i < size; i++) {
            Symbol fname = (Symbol) forwardTypes_d.elementAt(i);
            String baseName = fname.baseName();

            if (name.equals(baseName) || name.equals(fname)) {
                return;                         // no need to load it !
            }
        }

        // If not, try to load its class file
        if (!name.isQualified()) {
            try {
                Symbol fullName = importMgr_d.fullyQualifyName(name);
                if (fullName != null) {
                    importMgr_d.readClassFile(fullName, true);
                } else {
                    ErrorMsg error = new ErrorMsg(ErrorMsg.NOTCLASS_ERR,
                            node.line_d);
                    errors_d.addElement(error.toString(name.toString()));
                }
            } catch (Exception e) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.AMBITYPE_ERR,
                        node.line_d);
                errors_d.addElement(error.toString(e.getMessage()));
            }
        } else if (!importMgr_d.existsClass(name)) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.NOTCLASS_ERR,
                    node.line_d);
            errors_d.addElement(error.toString(name.toString()));
        } else {
            importMgr_d.readClassFile(name, true);
        }
    }

    /*
	 * This predicate is used by the StatementExp() production as a result
	 * of a limitation in the grammar.
     */
    private boolean statementExp(ExpressionNode node) {
        return (node instanceof PreIncrementExpNode || node instanceof PreDecrementExpNode
                || node instanceof PostIncrementExpNode || node instanceof PostDecrementExpNode
                || node instanceof AssignmentNode || node instanceof MethodExpNode
                || node instanceof AllocationExpNode);
    }

    /**
     * ***************************************
     * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 ****************************************
     */

    /*
 * Program structuring syntax follows.
     */
    final public CompilationUnitNode CompilationUnit() throws ParseException {
        Symbol imp;
        TypeDeclarationNode typ;
        CompilationUnitNode node = new CompilationUnitNode();

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));

        // Link the tree from the root_d field
        root_d = node;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PACKAGE:
                PackageDeclaration(node);
                break;
            default:
                jj_la1[0] = jj_gen;
                ;
        }
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IMPORT:
        ;
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }
            imp = ImportDeclaration();
            if (!imp.toString().endsWith("*")) {
                if (!node.imports_d.contains(imp)) {
                    node.imports_d.addElement(imp);

                    // Verify the single-imports are correct
                    if (!importMgr_d.existsClass(imp)) {
                        ErrorMsg error = new ErrorMsg(ErrorMsg.NOTCLASS_ERR,
                                node.line_d);
                        errors_d.addElement(error.toString(imp.toString()));
                    } else {
                        importMgr_d.readClassFile(imp, false);
                    }
                }
            } else {
                // Qualified imports are handled by the ImportManager
                importMgr_d.addQualifiedImport(imp);
            }
        }
        /* 
		 * Either add to the qualified imports the name of the package
		 * followed by '*' or simply a '*' if no package was specified.
         */
        imp = packName_d.equals(DEFAULT_PACKAGE) ? new Symbol("*")
                : new Symbol(packName_d, "*");
        importMgr_d.addQualifiedImport(imp);
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case CLASS:
                case FINAL:
                case INTERFACE:
                case PUBLIC:
                case SEMICOLON:
        ;
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
            typ = TypeDeclaration();
            node.types_d.addElement(typ);
        }
        jj_consume_token(0);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void PackageDeclaration(CompilationUnitNode node) throws ParseException {
        jj_consume_token(PACKAGE);
        node.packName_d = Name();
        jj_consume_token(SEMICOLON);
        symbolTable_d.addPackage(node.packName_d, node);
        packName_d = node.packName_d;
    }

    final public Symbol ImportDeclaration() throws ParseException {
        Symbol result;
        jj_consume_token(IMPORT);
        result = Name();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(STAR);
                result = new Symbol(result, "*");
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        {
            if (true) {
                return result;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public TypeDeclarationNode TypeDeclaration() throws ParseException {
        TypeDeclarationNode node = null;
        if (jj_2_1(2147483647)) {
            node = ClassDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case INTERFACE:
                case PUBLIC:
                    node = InterfaceDeclaration();
                    break;
                case SEMICOLON:
                    jj_consume_token(SEMICOLON);
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * Declaration syntax follows.
     */
    final public ClassDeclarationNode ClassDeclaration() throws ParseException {
        ClassBodyDeclarationNode decl;
        ClassDeclarationNode node = new ClassDeclarationNode();
        node.superName_d = new Symbol(DEFAULT_SUPER);

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case FINAL:
                case PUBLIC:
        ;
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    node.accessFlags_d |= Constants.ACC_ABSTRACT;
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    node.accessFlags_d |= Constants.ACC_FINAL;
                    break;
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    node.accessFlags_d |= Constants.ACC_PUBLIC;
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(CLASS);
        jj_consume_token(IDENTIFIER);
        className_d = node.name_d = new Symbol(packName_d, token.image);
        SyntaxTreeNode aux
                = symbolTable_d.addType(node.name_d, node);
        if (aux != null) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.CLASSDEF_ERR, token.beginLine);
            errors_d.addElement(error.toString(node.name_d.baseName()));
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EXTENDS:
                jj_consume_token(EXTENDS);
                node.superName_d = ResolvedName();
                superName_d = node.superName_d;
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
        readClassesUpToRoot(node.superName_d, node);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IMPLEMENTS:
                jj_consume_token(IMPLEMENTS);
                node.interfaces_d = ResolvedNameList();
                for (Enumeration e = node.interfaces_d.elements(); e.hasMoreElements();) {
                    Symbol unit = (Symbol) e.nextElement();
                    readClassesUpToRoot(unit, node);
                }
                break;
            default:
                jj_la1[8] = jj_gen;
                ;
        }
        jj_consume_token(LBRACE);
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
        ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_4;
            }
            decl = ClassBodyDeclaration();
            node.body_d.addElement(decl);
        }
        jj_consume_token(RBRACE);
        addDefaultConstructor(node);
        createStaticInit(node);
        copyInitializers(node);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ClassBodyDeclarationNode ClassBodyDeclaration() throws ParseException {
        ClassBodyDeclarationNode node = null;
        if (jj_2_2(2)) {
            node = StaticInitializer();
        } else if (jj_2_3(2147483647)) {
            node = ConstructorDeclaration();
        } else if (jj_2_4(2147483647)) {
            node = MethodDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
                case IDENTIFIER:
                    node = FieldDeclaration();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * This production is to determine lookahead only.
 * Hence, no node is generated in the AST for it. (Santiago)
     */
    final public void MethodDeclarationLookahead() throws ParseException {
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case FINAL:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case SYNCHRONIZED:
        ;
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    break;
                case PROTECTED:
                    jj_consume_token(PROTECTED);
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    break;
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    break;
                case NATIVE:
                    jj_consume_token(NATIVE);
                    break;
                case SYNCHRONIZED:
                    jj_consume_token(SYNCHRONIZED);
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        ResultTypeExp();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
    }

    final public InterfaceDeclarationNode InterfaceDeclaration() throws ParseException {
        ClassBodyDeclarationNode decl;
        InterfaceDeclarationNode node = new InterfaceDeclarationNode();

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case PUBLIC:
        ;
                    break;
                default:
                    jj_la1[13] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    node.accessFlags_d |= Constants.ACC_ABSTRACT;
                    break;
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    node.accessFlags_d |= Constants.ACC_PUBLIC;
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENTIFIER);
        className_d = node.name_d = new Symbol(packName_d, token.image);
        SyntaxTreeNode aux
                = symbolTable_d.addType(node.name_d, node);
        if (aux != null) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.INTERDEF_ERR, token.beginLine);
            errors_d.addElement(error.toString(node.name_d.baseName()));
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EXTENDS:
                jj_consume_token(EXTENDS);
                node.interfaces_d = ResolvedNameList();
                for (Enumeration e = node.interfaces_d.elements(); e.hasMoreElements();) {
                    Symbol unit = (Symbol) e.nextElement();
                    readClassesUpToRoot(unit, node);
                }
                break;
            default:
                jj_la1[15] = jj_gen;
                ;
        }
        jj_consume_token(LBRACE);
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOID:
                case VOLATILE:
                case IDENTIFIER:
        ;
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    break label_7;
            }
            decl = InterfaceMemberDeclaration();
            node.body_d.addElement(decl);
        }
        jj_consume_token(RBRACE);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * Productions 'MethodDeclaration()' and 'FieldDeclaration()' are reused
 * at this point. Hence, so is the type 'ClassBodyDeclarationNode'.
     */
    final public ClassBodyDeclarationNode InterfaceMemberDeclaration() throws ParseException {
        ClassBodyDeclarationNode node = null;
        if (jj_2_5(2147483647)) {
            node = MethodDeclaration();
            node.accessFlags_d = (Constants.ACC_ABSTRACT
                    | Constants.ACC_PUBLIC);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
                case IDENTIFIER:
                    node = FieldDeclaration();
                    node.accessFlags_d = (Constants.ACC_STATIC
                            | Constants.ACC_FINAL | Constants.ACC_PUBLIC);
                    break;
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public FieldDeclarationNode FieldDeclaration() throws ParseException {
        VariableDeclaratorNode var;
        FieldDeclarationNode node = new FieldDeclarationNode();
        Token token = getToken(1);
        // Add source code info for error reporting
        recordSourceCoord(node, token);
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FINAL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case TRANSIENT:
                case VOLATILE:
        ;
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    break label_8;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    node.accessFlags_d |= Constants.ACC_PUBLIC;
                    break;
                case PROTECTED:
                    jj_consume_token(PROTECTED);
                    node.accessFlags_d |= Constants.ACC_PROTECTED;
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    node.accessFlags_d |= Constants.ACC_PRIVATE;
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    node.accessFlags_d |= Constants.ACC_STATIC;
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    node.accessFlags_d |= Constants.ACC_FINAL;
                    break;
                case TRANSIENT:
                    jj_consume_token(TRANSIENT);
                    node.accessFlags_d |= Constants.ACC_TRANSIENT;
                    break;
                case VOLATILE:
                    jj_consume_token(VOLATILE);
                    node.accessFlags_d |= Constants.ACC_VOLATILE;
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        node.type_d = TypeExp();
        var = VariableDeclarator(true);
        node.fields_d.addElement(var);
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_9;
            }
            jj_consume_token(COMMA);
            var = VariableDeclarator(true);
            node.fields_d.addElement(var);
        }
        jj_consume_token(SEMICOLON);
        node.encodeType();

        /*
		 * Adds the fields to the symbol table
         */
        int n = node.fields_d.size();                                           // TODO check forward references
        for (int i = 0; i < n; i++) {
            var = (VariableDeclaratorNode) node.fields_d.elementAt(i);

            FieldDeclarationNode aux
                    = symbolTable_d.addField(var.name_d, node);
            if (aux != null) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.FIELDDEF_ERR,
                        token.beginLine);
                errors_d.addElement(error.toString(var.name_d.baseName()));
            }

            /*
			 * Add field initializers to either fieldInit_d or staticInit_d except
			 * when the field is final and initialized by a literal. In this case 
		 	 * the literal is always fetched directly from the CP and, hence, the
			 * actual field never accessed.
             */
            if (var.init_d != null && !(node.isFinal() && var.init_d instanceof Literal)) {
                ExpressionNode left;
                if (node.isStatic()) {
                    left = new TypeExpNode(var.name_d.pathName());
                } else {
                    left = new ThisExpNode(var.name_d.pathName());
                }
                recordSourceCoord(left, token);
                FieldExpNode field = new FieldExpNode(left, var.name_d.baseName(),
                        methodNode_d);
                recordSourceCoord(field, token);
                field.leftValue_d = true;

                AssignmentNode ass = new AssignmentNode(field, var.init_d);
                ass.operator_d = Operators.EQ;
                ass.statementExp_d = true;                      // avoid needless DUPS
                recordSourceCoord(ass, token);
                if (node.isStatic()) {
                    staticInit_d.addStatement(new StatementExpNode(ass));
                } else {
                    fieldInit_d.addStatement(new StatementExpNode(ass));
                }
            }
        }

        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public VariableDeclaratorNode VariableDeclarator(boolean fieldFlag) throws ParseException {
        Symbol name;
        VariableDeclaratorNode node = new VariableDeclaratorNode(fieldFlag);

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));
        name = VariableDeclaratorId();
        node.name_d = new Symbol(className_d, name);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                node.init_d = VariableInitializer();
                break;
            default:
                jj_la1[21] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol VariableDeclaratorId() throws ParseException {
        String result;
        jj_consume_token(IDENTIFIER);
        result = token.image;
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACKET:
        ;
                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_10;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            result += "[";
        }
        {
            if (true) {
                return new Symbol(result);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode VariableInitializer() throws ParseException {
        ExpressionNode node = null;
        Token token = getToken(1);
        ExpressionNode ainit = null;
        Vector initlist = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
                jj_consume_token(LBRACE);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case FALSE:
                    case NEW:
                    case NULL:
                    case SUPER:
                    case THIS:
                    case TRUE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case LBRACE:
                    case BANG:
                    case TILDE:
                    case INCR:
                    case DECR:
                    case PLUS:
                    case MINUS:
                        ainit = VariableInitializer();
                        initlist = new Vector(5);
                        initlist.addElement(ainit);
                        label_11:
                        while (true) {
                            if (jj_2_6(2)) {
                                ;
                            } else {
                                break label_11;
                            }
                            jj_consume_token(COMMA);
                            ainit = VariableInitializer();
                            initlist.addElement(ainit);
                        }
                        break;
                    default:
                        jj_la1[23] = jj_gen;
                        ;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case COMMA:
                        jj_consume_token(COMMA);
                        break;
                    default:
                        jj_la1[24] = jj_gen;
                        ;
                }
                jj_consume_token(RBRACE);
                node = new ArrayInitializerNode(initlist);
                break;
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                node = Expression();
                break;
            default:
                jj_la1[25] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        recordSourceCoord(node, token);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public MethodDeclarationNode MethodDeclaration() throws ParseException {
        MethodDeclarationNode node = new MethodDeclarationNode();

        // Update the pointer to the current method
        methodNode_d = node;

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));

        // Start a new scope at this point
        node.scope_d = scopes_d.pushInteger(counter_d.next());
        label_12:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ABSTRACT:
                case FINAL:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case SYNCHRONIZED:
        ;
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_12;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PUBLIC:
                    jj_consume_token(PUBLIC);
                    node.accessFlags_d |= Constants.ACC_PUBLIC;
                    break;
                case PROTECTED:
                    jj_consume_token(PROTECTED);
                    node.accessFlags_d |= Constants.ACC_PROTECTED;
                    break;
                case PRIVATE:
                    jj_consume_token(PRIVATE);
                    node.accessFlags_d |= Constants.ACC_PRIVATE;
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    node.accessFlags_d |= Constants.ACC_STATIC;
                    break;
                case ABSTRACT:
                    jj_consume_token(ABSTRACT);
                    node.accessFlags_d |= Constants.ACC_ABSTRACT;
                    break;
                case FINAL:
                    jj_consume_token(FINAL);
                    node.accessFlags_d |= Constants.ACC_FINAL;
                    break;
                case NATIVE:
                    jj_consume_token(NATIVE);
                    node.accessFlags_d |= Constants.ACC_NATIVE;
                    break;
                case SYNCHRONIZED:
                    jj_consume_token(SYNCHRONIZED);
                    node.accessFlags_d |= Constants.ACC_SYNCHRONIZED;
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        node.type_d = ResultTypeExp();
        MethodDeclarator(node);
        node.encodeType();
        Vector methods = symbolTable_d.lookupMethod(node.name_d);
        if (methods != null) {
            int size = methods.size();
            for (int i = 0; i < size; i++) {
                MethodDeclarationNode mnode = (MethodDeclarationNode) methods.elementAt(i);

                // Compare types modulo return types
                MethodType mtype = (MethodType) node.type_d;
                if (mtype.identicalTo(mnode.type_d, true)) {
                    ErrorMsg error = new ErrorMsg(ErrorMsg.DUPMETHD_ERR,
                            token.beginLine);
                    errors_d.addElement(error.toString(node.name_d.baseName()));
                }
            }
        }
        symbolTable_d.addMethod(node.name_d, node);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case THROWS:
                jj_consume_token(THROWS);
                node.exceptions_d = ResolvedNameList();
                break;
            default:
                jj_la1[28] = jj_gen;
                ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACE:
                node.block_d = Block(false);
                break;
            case SEMICOLON:
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        // Reset the pointer to the current method
        methodNode_d = null;

        scopes_d.popInteger();                          // end scope
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void MethodDeclarator(MethodDeclarationNode node) throws ParseException {
        String name;
        jj_consume_token(IDENTIFIER);
        name = token.image;
        methodName_d = node.name_d = new Symbol(className_d, name);
        node.formals_d = FormalParameters();
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACKET:
        ;
                    break;
                default:
                    jj_la1[30] = jj_gen;
                    break label_13;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            name += "[";
        }
    }

    final public Vector FormalParameters() throws ParseException {
        FormalParameterNode fml;
        Vector formals = new Vector();
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                fml = FormalParameter();
                formals.addElement(fml);
                label_14:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case COMMA:
          ;
                            break;
                        default:
                            jj_la1[31] = jj_gen;
                            break label_14;
                    }
                    jj_consume_token(COMMA);
                    fml = FormalParameter();
                    formals.addElement(fml);
                }
                break;
            default:
                jj_la1[32] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
        {
            if (true) {
                return formals;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameterNode FormalParameter() throws ParseException {
        Symbol name;
        Integer scope = scopes_d.peekInteger();
        FormalParameterNode node = new FormalParameterNode();

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));
        node.type_d = TypeExp();
        name = VariableDeclaratorId();
        // Create a formal with the method name and the scope
        node.name_d = new Symbol(methodName_d, scope, name);

        node.encodeType();

        FormalParameterNode aux;
        aux = symbolTable_d.addFormal(node.name_d, node);
        if (aux != null) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.LOCALDEF_ERR,
                    token.beginLine);
            errors_d.addElement(error.toString(node.name_d.baseName()));
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ConstructorDeclarationNode ConstructorDeclaration() throws ParseException {
        StatementNode bstmt;
        BlockNode blockNode = new BlockNode();
        ConstructorDeclarationNode node = new ConstructorDeclarationNode();

        // Update the pointer to the current method
        methodNode_d = node;

        // Default call to super
        node.consInvocation_d = new ConstructorInvocationNode(superName_d);

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));

        // Start a new scope at this point
        node.scope_d = scopes_d.pushInteger(counter_d.next());
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PRIVATE:
            case PROTECTED:
            case PUBLIC:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case PUBLIC:
                        jj_consume_token(PUBLIC);
                        node.accessFlags_d |= Constants.ACC_PUBLIC;
                        break;
                    case PROTECTED:
                        jj_consume_token(PROTECTED);
                        node.accessFlags_d |= Constants.ACC_PROTECTED;
                        break;
                    case PRIVATE:
                        jj_consume_token(PRIVATE);
                        node.accessFlags_d |= Constants.ACC_PRIVATE;
                        break;
                    default:
                        jj_la1[33] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[34] = jj_gen;
                ;
        }
        jj_consume_token(IDENTIFIER);
        methodName_d = node.name_d = new Symbol(className_d, node.name_d);
        node.formals_d = FormalParameters();
        node.encodeType();
        symbolTable_d.addMethod(node.name_d, node);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case THROWS:
                jj_consume_token(THROWS);
                node.exceptions_d = ResolvedNameList();
                break;
            default:
                jj_la1[35] = jj_gen;
                ;
        }
        jj_consume_token(LBRACE);
        if (jj_2_7(2)) {
            node.consInvocation_d = ConstructorInvocation();
        } else {
            ;
        }
        label_15:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
        ;
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    break label_15;
            }
            bstmt = BlockStatement(true);
            blockNode.stmts_d.addElement(bstmt);
        }
        jj_consume_token(RBRACE);
        // Reset the pointer to the current method
        methodNode_d = null;

        node.block_d = blockNode;               // link the main block
        scopes_d.popInteger();                          // end scope
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ConstructorInvocationNode ConstructorInvocation() throws ParseException {
        ConstructorInvocationNode node = new ConstructorInvocationNode();

        // Add source code info for error reporting
        recordSourceCoord(node, getToken(1));
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case THIS:
                jj_consume_token(THIS);
                node.args_d = Arguments();
                node.invocationThis_d = true;
                node.name_d = className_d;
                jj_consume_token(SEMICOLON);
                break;
            case SUPER:
                jj_consume_token(SUPER);
                node.args_d = Arguments();
                node.name_d = superName_d;
                jj_consume_token(SEMICOLON);
                break;
            default:
                jj_la1[37] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StaticInitializerNode StaticInitializer() throws ParseException {
        StaticInitializerNode node = new StaticInitializerNode();
        methodName_d = new Symbol("<clinit>");

        // Start a new scope at this point
        scopes_d.pushInteger(counter_d.next());
        jj_consume_token(STATIC);
        node.block_d = Block(false);
        /*
		 * Add the statements defined in this block to the staticInit_d
		 * block where all the initializations are collected.
         */
        int n = node.block_d.numberOfStatments();
        for (int i = 0; i < n; i++) {
            staticInit_d.addStatement(node.block_d.statementAt(i));
        }
        scopes_d.popInteger();                  // end scope
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * Type, name and expression syntax follows.
     */
    final public Type TypeExp() throws ParseException {
        Type result;
        Symbol name;
        int dims = 0;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                name = ResolvedName();
                result = new ClassType(name);
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
                result = PrimitiveTypeExp();
                break;
            default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        label_16:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACKET:
        ;
                    break;
                default:
                    jj_la1[39] = jj_gen;
                    break label_16;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            dims++;
        }
        if (dims > 0) {
            result = new ArrayType(result, dims);
        }
        {
            if (true) {
                return result;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Type PrimitiveTypeExp() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BOOLEAN:
                jj_consume_token(BOOLEAN);
                 {
                    if (true) {
                        return Type.Boolean;
                    }
                }
                break;
            case CHAR:
                jj_consume_token(CHAR);
                 {
                    if (true) {
                        return Type.Char;
                    }
                }
                break;
            case BYTE:
                jj_consume_token(BYTE);
                 {
                    if (true) {
                        return Type.Byte;
                    }
                }
                break;
            case SHORT:
                jj_consume_token(SHORT);
                 {
                    if (true) {
                        return Type.Short;
                    }
                }
                break;
            case INT:
                jj_consume_token(INT);
                 {
                    if (true) {
                        return Type.Int;
                    }
                }
                break;
            case LONG:
                jj_consume_token(LONG);
                 {
                    if (true) {
                        return Type.Long;
                    }
                }
                break;
            case FLOAT:
                jj_consume_token(FLOAT);
                 {
                    if (true) {
                        return Type.Float;
                    }
                }
                break;
            case DOUBLE:
                jj_consume_token(DOUBLE);
                 {
                    if (true) {
                        return Type.Double;
                    }
                }
                break;
            default:
                jj_la1[40] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public Type ResultTypeExp() throws ParseException {
        Type result;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case VOID:
                jj_consume_token(VOID);
                 {
                    if (true) {
                        return Type.Void;
                    }
                }
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case IDENTIFIER:
                result = TypeExp();
                 {
                    if (true) {
                        return result;
                    }
                }
                break;
            default:
                jj_la1[41] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol Name() throws ParseException {
        String result;
        jj_consume_token(IDENTIFIER);
        result = token.image;
        label_17:
        while (true) {
            if (jj_2_8(2)) {
                ;
            } else {
                break label_17;
            }
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            result += "." + token.image;
        }
        {
            if (true) {
                return new Symbol(result);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Symbol ResolvedName() throws ParseException {
        Symbol name;
        name = Name();
        // If not a type, a forward ref is created by findTypeName()

        ExpressionNode node = findTypeName(name, true);
        if (node instanceof TypeExpNode) {
            name = ((TypeExpNode) node).toSymbol();
        } else if (node instanceof ThisExpNode) {
            name = className_d;
        } else if (node instanceof SuperExpNode) {
            name = superName_d;
        }

        {
            if (true) {
                return name;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Vector ResolvedNameList() throws ParseException {
        Symbol name;
        Vector result = new Vector(5);
        name = ResolvedName();
        result.addElement(name);
        label_18:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[42] = jj_gen;
                    break label_18;
            }
            jj_consume_token(COMMA);
            name = ResolvedName();
            result.addElement(name);
        }
        {
            if (true) {
                return result;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * Expression syntax follows.
     */
    final public ExpressionNode Expression() throws ParseException {
        ExpressionNode node;
        Token token = getToken(1);
        if (jj_2_9(2147483647)) {
            node = Assignment();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    node = ConditionalExp();
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        recordSourceCoord(node, token);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode Assignment() throws ParseException {
        AssignmentNode node = new AssignmentNode();
        recordSourceCoord(node, getToken(1));
        node.left_d = PrimaryExp();
        node.operator_d = AssignmentOperator();
        node.right_d = Expression();
        // This is needed for chained assignments
        if (node.right_d instanceof AssignmentNode) {
            AssignmentNode anode = (AssignmentNode) node.right_d;
            anode.parent_d = node;                          // needed for dups
        }

        // Left flag set here
        node.left_d.leftValue_d = true;
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public int AssignmentOperator() throws ParseException {
        int result;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                result = Operators.EQ;
                break;
            case STARASSIGN:
                jj_consume_token(STARASSIGN);
                result = Operators.TS_EQ;
                break;
            case SLASHASSIGN:
                jj_consume_token(SLASHASSIGN);
                result = Operators.DV_EQ;
                break;
            case REMASSIGN:
                jj_consume_token(REMASSIGN);
                result = Operators.MD_EQ;
                break;
            case PLUSASSIGN:
                jj_consume_token(PLUSASSIGN);
                result = Operators.PS_EQ;
                break;
            case MINUSASSIGN:
                jj_consume_token(MINUSASSIGN);
                result = Operators.MS_EQ;
                break;
            case LSHIFTASSIGN:
                jj_consume_token(LSHIFTASSIGN);
                result = Operators.SL_EQ;
                break;
            case RSIGNEDSHIFTASSIGN:
                jj_consume_token(RSIGNEDSHIFTASSIGN);
                result = Operators.SR_EQ;
                break;
            case RUNSIGNEDSHIFTASSIGN:
                jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                result = Operators.SS_EQ;
                break;
            case ORASSIGN:
                jj_consume_token(ORASSIGN);
                result = Operators.OR_EQ;
                break;
            case ANDASSIGN:
                jj_consume_token(ANDASSIGN);
                result = Operators.AND_EQ;
                break;
            case XORASSIGN:
                jj_consume_token(XORASSIGN);
                result = Operators.XOR_EQ;
                break;
            default:
                jj_la1[44] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return result;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode ConditionalExp() throws ParseException {
        ExpressionNode node, falseCase, trueCase;
        node = ConditionalOrExp();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case HOOK:
                jj_consume_token(HOOK);
                trueCase = Expression();
                jj_consume_token(COLON);
                falseCase = ConditionalExp();
                node = new ConditionalExpNode(node, trueCase, falseCase);
                break;
            default:
                jj_la1[45] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode ConditionalOrExp() throws ParseException {
        ExpressionNode node, left, right;
        left = ConditionalAndExp();
        node = left;
        label_19:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SC_OR:
        ;
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    break label_19;
            }
            jj_consume_token(SC_OR);
            right = ConditionalAndExp();
            left = node = new ConditionalOrExpNode(left, right);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode ConditionalAndExp() throws ParseException {
        ExpressionNode node, left, right;
        left = InclusiveOrExp();
        node = left;
        label_20:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SC_AND:
        ;
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    break label_20;
            }
            jj_consume_token(SC_AND);
            right = InclusiveOrExp();
            left = node = new ConditionalAndExpNode(left, right);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode InclusiveOrExp() throws ParseException {
        ExpressionNode node, left, right;
        left = ExclusiveOrExp();
        node = left;
        label_21:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BIT_OR:
        ;
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    break label_21;
            }
            jj_consume_token(BIT_OR);
            right = ExclusiveOrExp();
            left = node = new InclusiveOrExpNode(left, right);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode ExclusiveOrExp() throws ParseException {
        ExpressionNode node, left, right;
        left = AndExp();
        node = left;
        label_22:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case XOR:
        ;
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    break label_22;
            }
            jj_consume_token(XOR);
            right = AndExp();
            left = node = new ExclusiveOrExpNode(left, right);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode AndExp() throws ParseException {
        ExpressionNode node, left, right;
        left = EqualityExp();
        node = left;
        label_23:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BIT_AND:
        ;
                    break;
                default:
                    jj_la1[50] = jj_gen;
                    break label_23;
            }
            jj_consume_token(BIT_AND);
            right = EqualityExp();
            left = node = new AndExpNode(left, right);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode EqualityExp() throws ParseException {
        int operator;
        ExpressionNode node, left, right;
        left = InstanceOfExp();
        node = left;
        label_24:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                case NE:
        ;
                    break;
                default:
                    jj_la1[51] = jj_gen;
                    break label_24;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQ:
                    jj_consume_token(EQ);
                    operator = Operators.EQ_EQ;
                    break;
                case NE:
                    jj_consume_token(NE);
                    operator = Operators.NEQ_EQ;
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = InstanceOfExp();
            left = node = new EqualityExpNode(left, right, operator);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode InstanceOfExp() throws ParseException {
        Type type;
        ExpressionNode node, left;
        left = RelationalExp();
        node = left;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INSTANCEOF:
                jj_consume_token(INSTANCEOF);
                type = TypeExp();
                node = new InstanceOfExpNode(left, type);
                break;
            default:
                jj_la1[53] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode RelationalExp() throws ParseException {
        int operator;
        ExpressionNode node, left, right;
        left = ShiftExp();
        node = left;
        label_25:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case GT:
                case LT:
                case LE:
                case GE:
        ;
                    break;
                default:
                    jj_la1[54] = jj_gen;
                    break label_25;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LT:
                    jj_consume_token(LT);
                    operator = Operators.LT;
                    break;
                case GT:
                    jj_consume_token(GT);
                    operator = Operators.GT;
                    break;
                case LE:
                    jj_consume_token(LE);
                    operator = Operators.LT_EQ;
                    break;
                case GE:
                    jj_consume_token(GE);
                    operator = Operators.GT_EQ;
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = ShiftExp();
            left = node = new RelationalExpNode(left, right, operator);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode ShiftExp() throws ParseException {
        int operator;
        ExpressionNode node, left, right;
        left = AdditiveExp();
        node = left;
        label_26:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LSHIFT:
                case RSIGNEDSHIFT:
                case RUNSIGNEDSHIFT:
        ;
                    break;
                default:
                    jj_la1[56] = jj_gen;
                    break label_26;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LSHIFT:
                    jj_consume_token(LSHIFT);
                    operator = Operators.SL;
                    break;
                case RSIGNEDSHIFT:
                    jj_consume_token(RSIGNEDSHIFT);
                    operator = Operators.SR;
                    break;
                case RUNSIGNEDSHIFT:
                    jj_consume_token(RUNSIGNEDSHIFT);
                    operator = Operators.SS;
                    break;
                default:
                    jj_la1[57] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = AdditiveExp();
            left = node = new ShiftExpNode(left, right, operator);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode AdditiveExp() throws ParseException {
        int operator;
        ExpressionNode node, left, right;
        left = MultiplicativeExp();
        node = left;
        label_27:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                case MINUS:
        ;
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    break label_27;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    operator = Operators.PS;
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    operator = Operators.MS;
                    break;
                default:
                    jj_la1[59] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = MultiplicativeExp();
            left = node = new AdditiveExpNode(left, right, operator);
            if (((AdditiveExpNode) node).left_d instanceof AdditiveExpNode) {
                AdditiveExpNode addexpnode
                        = (AdditiveExpNode) ((AdditiveExpNode) node).left_d;
                addexpnode.parent_d = node;
                /*    ((AdditiveExpNode)node).parent_d = ((AdditiveExpNode)node).left_d;*/
            }
        }
        recordSourceCoord(node, getToken(1));
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode MultiplicativeExp() throws ParseException {
        int operator;
        ExpressionNode node, left, right;
        left = UnaryExp();
        node = left;
        label_28:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STAR:
                case SLASH:
                case REM:
        ;
                    break;
                default:
                    jj_la1[60] = jj_gen;
                    break label_28;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STAR:
                    jj_consume_token(STAR);
                    operator = Operators.TS;
                    break;
                case SLASH:
                    jj_consume_token(SLASH);
                    operator = Operators.DV;
                    break;
                case REM:
                    jj_consume_token(REM);
                    operator = Operators.MD;
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            right = UnaryExp();
            left = node = new MultiplicativeExpNode(left, right, operator);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryExp() throws ParseException {
        ExpressionNode node;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case PLUS:
                node = UnaryPlusExp();
                break;
            case MINUS:
                node = UnaryMinusExp();
                break;
            case INCR:
                node = PreIncrementExp();
                break;
            case DECR:
                node = PreDecrementExp();
                break;
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
                node = UnaryExpressionNotPlusMinus();
                break;
            default:
                jj_la1[62] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryPlusExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(PLUS);
        left = UnaryExp();
        {
            if (true) {
                return new UnaryPlusExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryMinusExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(MINUS);
        left = UnaryExp();
        {
            if (true) {
                return new UnaryMinusExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode PreIncrementExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(INCR);
        left = PrimaryExp();
        {
            if (true) {
                return new PreIncrementExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode PreDecrementExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(DECR);
        left = PrimaryExp();
        {
            if (true) {
                return new PreDecrementExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryExpressionNotPlusMinus() throws ParseException {
        ExpressionNode node;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BANG:
                node = UnaryNotExp();
                break;
            case TILDE:
                node = UnaryNegExp();
                break;
            default:
                jj_la1[63] = jj_gen;
                if (jj_2_10(2147483647)) {
                    node = CastExp();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case FALSE:
                        case NEW:
                        case NULL:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            node = PostfixExp();
                            break;
                        default:
                            jj_la1[64] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryNotExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(BANG);
        left = UnaryExp();
        {
            if (true) {
                return new UnaryNotExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode UnaryNegExp() throws ParseException {
        ExpressionNode left;
        jj_consume_token(TILDE);
        left = UnaryExp();
        {
            if (true) {
                return new UnaryNegExpNode(left);
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * This production is to determine lookahead only.  The LOOKAHEAD specifications
 * below are not used, but they are there just to indicate that we know about
 * this.
     */
    final public void CastLookahead() throws ParseException {
        if (jj_2_11(2)) {
            jj_consume_token(LPAREN);
            PrimitiveTypeExp();
        } else if (jj_2_12(2147483647)) {
            jj_consume_token(LPAREN);
            Name();
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    Name();
                    jj_consume_token(RPAREN);
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case TILDE:
                            jj_consume_token(TILDE);
                            break;
                        case BANG:
                            jj_consume_token(BANG);
                            break;
                        case LPAREN:
                            jj_consume_token(LPAREN);
                            break;
                        case IDENTIFIER:
                            jj_consume_token(IDENTIFIER);
                            break;
                        case THIS:
                            jj_consume_token(THIS);
                            break;
                        case SUPER:
                            jj_consume_token(SUPER);
                            break;
                        case NEW:
                            jj_consume_token(NEW);
                            break;
                        case FALSE:
                        case NULL:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                            Literal();
                            break;
                        default:
                            jj_la1[65] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    break;
                default:
                    jj_la1[66] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public ExpressionNode PostfixExp() throws ParseException {
        ExpressionNode node;
        node = PrimaryExp();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INCR:
            case DECR:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INCR:
                        jj_consume_token(INCR);
                        node = new PostIncrementExpNode(node);
                        break;
                    case DECR:
                        jj_consume_token(DECR);
                        node = new PostDecrementExpNode(node);
                        break;
                    default:
                        jj_la1[67] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[68] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode CastExp() throws ParseException {
        Type type;
        Symbol name;
        int dims = 0;
        ExpressionNode left;
        if (jj_2_13(2)) {
            jj_consume_token(LPAREN);
            type = PrimitiveTypeExp();
            label_29:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LBRACKET:
          ;
                        break;
                    default:
                        jj_la1[69] = jj_gen;
                        break label_29;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
                dims++;
            }
            jj_consume_token(RPAREN);
            left = UnaryExp();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LPAREN:
                    jj_consume_token(LPAREN);
                    name = ResolvedName();
                    type = new ClassType(name);
                    label_30:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case LBRACKET:
            ;
                                break;
                            default:
                                jj_la1[70] = jj_gen;
                                break label_30;
                        }
                        jj_consume_token(LBRACKET);
                        jj_consume_token(RBRACKET);
                        dims++;
                    }
                    jj_consume_token(RPAREN);
                    left = UnaryExpressionNotPlusMinus();
                    break;
                default:
                    jj_la1[71] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        if (dims > 0) {
            type = new ArrayType(type, dims);
        }
        {
            if (true) {
                return new CastExpNode(left, type);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode PrimaryExp() throws ParseException {
        Symbol symbol;
        ExpressionNode left = null;
        ExpressionNode node = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FALSE:
            case NULL:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                left = Literal();
                label_31:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[72] = jj_gen;
                            break label_31;
                    }
                    left = PrimarySuffix(left);
                }
                node = left;
                break;
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                left = classifySimpleName(new Symbol(token.image));
                label_32:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[73] = jj_gen;
                            break label_32;
                    }
                    left = PrimarySuffix(left);
                }
                if (left instanceof PackageExpNode) {
                    symbol = ((PackageExpNode) left).toSymbol();

                    // This must be a field expression (maybe a forward ref)
                    ExpressionNode enode = (symbol.nOfFields() == 1)
                            ? (ExpressionNode) new ThisExpNode(className_d)
                            : (ExpressionNode) new TypeExpNode(symbol.pathName());
                    node = new FieldExpNode(enode, new Symbol(token.image), methodNode_d);
                } else {
                    node = left;
                }
                break;
            case THIS:
                jj_consume_token(THIS);
                left = new ThisExpNode(className_d);
                label_33:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[74] = jj_gen;
                            break label_33;
                    }
                    left = PrimarySuffix(left);
                }
                node = left;
                break;
            case SUPER:
                jj_consume_token(SUPER);
                jj_consume_token(DOT);
                jj_consume_token(IDENTIFIER);
                left = new FieldExpNode(new SuperExpNode(superName_d), new Symbol(token.image),
                        methodNode_d);
                label_34:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[75] = jj_gen;
                            break label_34;
                    }
                    left = PrimarySuffix(left);
                }
                node = left;
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                left = Expression();
                jj_consume_token(RPAREN);
                label_35:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[76] = jj_gen;
                            break label_35;
                    }
                    left = PrimarySuffix(left);
                }
                node = left;
                break;
            case NEW:
                left = AllocationExp();
                label_36:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                        case LBRACKET:
                        case DOT:
          ;
                            break;
                        default:
                            jj_la1[77] = jj_gen;
                            break label_36;
                    }
                    left = PrimarySuffix(left);
                }
                node = left;
                break;
            default:
                jj_la1[78] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        recordSourceCoord(node, getToken(1));
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode PrimarySuffix(ExpressionNode left) throws ParseException {
        Vector args;
        Symbol prefix, name;
        ExpressionNode node = null;
        ExpressionNode right = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case LBRACKET:
                jj_consume_token(LBRACKET);
                right = Expression();
                jj_consume_token(RBRACKET);
                node = new ArrayExpNode(left, right);
                break;
            case DOT:
                jj_consume_token(DOT);
                jj_consume_token(IDENTIFIER);
                name = new Symbol(token.image);

                if (left instanceof PackageExpNode) {
                    prefix = ((PackageExpNode) left).toSymbol();

                    right = classifySimpleName(name);

                    if (right instanceof TypeExpNode) {
                        node = new TypeExpNode(prefix, token.image);
                    } else if (right instanceof PackageExpNode
                            || right instanceof FieldExpNode) {               // is this OK ??
                        node = new PackageExpNode(prefix, token.image);
                    } else {
                        Espresso.internalError();
                    }
                } else {
                    if (left instanceof Literal) {
                        // check that left is a string 
                        // wrap left with an allocation express
                        if (left instanceof StringLiteral) {
                            Vector args1 = new Vector();
                            args1.addElement(left);
                            left = new AllocationExpNode(
                                    new ClassType("java.lang.String"), args1, false);
                        } else {
                            // We have an error
                            recordSourceCoord(left, getToken(1));
                            ErrorMsg error = new ErrorMsg(ErrorMsg.TYINVMET_ERR, left);
                            errors_d.addElement(error.toString(name));
                        }
                    }
                    node = new FieldExpNode(left, name, methodNode_d);
                }
                break;
            case LPAREN:
                args = Arguments();
                // If the name is ambiguous, then it must be a method

                if (left instanceof FieldExpNode) {
                    node = new MethodExpNode(left, args, methodNode_d);
                    {
                        if (true) {
                            return node;
                        }
                    }
                }

                String path = null;

                if (left instanceof PackageExpNode) {
                    name = ((PackageExpNode) left).name_d;
                    path = name.pathName();
                } else if (left instanceof TypeExpNode) {
                    name = ((TypeExpNode) left).name_d;
                    path = name.pathName();
                } else if (left instanceof LocalExpNode) {
                    name = ((LocalExpNode) left).name_d;
                    path = name.pathName(3);                        // Remove scope and method name
                } else if (left instanceof FormalExpNode) {
                    name = ((FormalExpNode) left).name_d;
                    path = name.pathName(3);                        // Remove scope and method name
                } else {
                    name = null;
                    Espresso.internalError();
                }

                ExpressionNode enode = path.equals("")
                        ? (ExpressionNode) new ThisExpNode(className_d)
                        : (ExpressionNode) new TypeExpNode(path);
                node = new MethodExpNode(new FieldExpNode(enode, name.baseName(),
                        methodNode_d), args, methodNode_d);
                break;
            default:
                jj_la1[79] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode Literal() throws ParseException {
        int last;
        String literal;
        ExpressionNode node = new IntegerLiteral(new Integer(0));       // temporary
        recordSourceCoord(node, getToken(1));
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INTEGER_LITERAL:
                jj_consume_token(INTEGER_LITERAL);
                char ch;
                literal = token.image;
                last = literal.length() - 1;

                int radix = 10;

                if (last > 0 && literal.charAt(0) == '0') {
                    ch = literal.charAt(1);
                    if (ch != 'L' && ch != 'l') {
                        radix = (ch == 'x' || ch == 'X') ? 16 : 8;
                        literal = literal.substring(radix / 8);                 // neat !
                        last = literal.length() - 1;
                    }
                }

                if (last >= 0) {
                    ch = literal.charAt(last);
                    if (ch == 'L' || ch == 'l') {
                        try {
                            literal = literal.substring(0, last);
                            Long value = new Long(Long.parseLong(literal, radix));
                            node = new LongLiteral(value);
                        } catch (NumberFormatException e) {
                            if (radix != 10) {
                                int len = literal.length();
                                int hd = Character.digit(literal.charAt(0), radix);

                                if (radix == 16 && len <= 16
                                        || radix == 8 && (len < 22 || len == 22 && hd <= 1)) {
                                    BigInteger bigint = new BigInteger(literal, radix);
                                    node = new LongLiteral(new Long(bigint.longValue()));
                                    {
                                        if (true) {
                                            return node;
                                        }
                                    }
                                }
                            }

                            // Error invalid literal
                            ErrorMsg error = new ErrorMsg(ErrorMsg.INVACONS_ERR, node);
                            errors_d.addElement(error.toString(token.image));
                        }
                    } else {
                        try {
                            Integer value = new Integer(Integer.parseInt(literal, radix));
                            node = new IntegerLiteral(value);
                        } catch (NumberFormatException e) {
                            if (radix != 10) {
                                int len = literal.length();
                                int hd = Character.digit(literal.charAt(0), radix);

                                if (radix == 16 && len <= 8
                                        || radix == 8 && (len < 11 || len == 11 && hd <= 3)) {
                                    BigInteger bigint = new BigInteger(literal, radix);
                                    node = new IntegerLiteral(new Integer(bigint.intValue()));
                                    {
                                        if (true) {
                                            return node;
                                        }
                                    }
                                }
                            }

                            // Error invalid literal
                            ErrorMsg error = new ErrorMsg(ErrorMsg.INVACONS_ERR, node);
                            errors_d.addElement(error.toString(token.image));
                        }
                    }
                } else {
                    Espresso.internalError();
                }
                break;
            case FLOATING_POINT_LITERAL:
                jj_consume_token(FLOATING_POINT_LITERAL);
                literal = token.image;
                last = literal.length() - 1;

                try {
                    switch (literal.charAt(last)) {
                        case 'f':
                        case 'F':
                            literal = literal.substring(0, last);
                            node = new FloatLiteral(new Float(literal));
                            break;
                        case 'd':
                        case 'D':
                            literal = literal.substring(0, last);
                        /* falls through */
                        default:
                            node = new DoubleLiteral(new Double(literal));
                            break;
                    }
                } catch (NumberFormatException e) {
                    Espresso.internalError();                               // oops - TODO
                }
                break;
            case CHARACTER_LITERAL:
                jj_consume_token(CHARACTER_LITERAL);
                /*
   	 * Use a temporary StringLiteral to encode the char.
                 */
                literal = token.image;
                StringLiteral temp = new StringLiteral(literal.substring(1,
                        literal.length() - 1));
                node = new CharacterLiteral(new Character(temp.charAt(0)));
                break;
            case STRING_LITERAL:
                jj_consume_token(STRING_LITERAL);
                literal = token.image;
                node = new StringLiteral(literal.substring(1, literal.length() - 1));
                break;
            case FALSE:
            case TRUE:
                node = BooleanLiteral();
                break;
            case NULL:
                node = NullLiteral();
                break;
            default:
                jj_la1[80] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode BooleanLiteral() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case TRUE:
                jj_consume_token(TRUE);
                 {
                    if (true) {
                        return new BooleanLiteral(new Boolean(true));
                    }
                }
                break;
            case FALSE:
                jj_consume_token(FALSE);
                 {
                    if (true) {
                        return new BooleanLiteral(new Boolean(false));
                    }
                }
                break;
            default:
                jj_la1[81] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode NullLiteral() throws ParseException {
        jj_consume_token(NULL);
        {
            if (true) {
                return new NullLiteral();
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Vector Arguments() throws ParseException {
        Vector args = null;
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                args = ArgumentList();
                break;
            default:
                jj_la1[82] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
        {
            if (true) {
                return args;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Vector ArgumentList() throws ParseException {
        ExpressionNode exp;
        Vector args = new Vector();
        exp = Expression();
        args.addElement(exp);
        label_37:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[83] = jj_gen;
                    break label_37;
            }
            jj_consume_token(COMMA);
            exp = Expression();
            args.addElement(exp);
        }
        {
            if (true) {
                return args;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionNode AllocationExp() throws ParseException {
        Vector args;
        boolean array = true;
        Symbol name;
        Type type;
        ExpressionNode node = null;
        if (jj_2_14(2)) {
            jj_consume_token(NEW);
            type = PrimitiveTypeExp();
            args = ArrayDimensions();
            node = new AllocationExpNode(type, args, array);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NEW:
                    jj_consume_token(NEW);
                    name = ResolvedName();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case LPAREN:
                            args = Arguments();
                            array = false;
                            break;
                        case LBRACKET:
                            args = ArrayDimensions();
                            break;
                        default:
                            jj_la1[84] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    node = new AllocationExpNode(new ClassType(name), args, array);
                    break;
                default:
                    jj_la1[85] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
     */
    final public Vector ArrayDimensions() throws ParseException {
        ExpressionNode exp;
        Vector args = new Vector(5);
        label_38:
        while (true) {
            jj_consume_token(LBRACKET);
            exp = Expression();
            args.addElement(exp);
            jj_consume_token(RBRACKET);
            if (jj_2_15(2)) {
                ;
            } else {
                break label_38;
            }
        }
        label_39:
        while (true) {
            if (jj_2_16(2)) {
                ;
            } else {
                break label_39;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            args.addElement(new NullLiteral());
        }
        {
            if (true) {
                return args;
            }
        }
        throw new Error("Missing return statement in function");
    }

    /*
 * Statement syntax follows.
     */
    final public StatementNode Statement(boolean newScope) throws ParseException {
        StatementNode node = null;
        if (jj_2_17(2)) {
            node = LabeledStatement();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case LBRACE:
                    node = Block(newScope);
                    break;
                case SEMICOLON:
                    node = EmptyStatement();
                    break;
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    node = StatementExp();
                    jj_consume_token(SEMICOLON);
                    break;
                case SWITCH:
                    node = SwitchStatement();
                    break;
                case IF:
                    node = IfStatement();
                    break;
                case WHILE:
                    node = WhileStatement();
                    break;
                case DO:
                    node = DoStatement();
                    break;
                case FOR:
                    node = ForStatement();
                    break;
                case BREAK:
                    node = BreakStatement();
                    break;
                case CONTINUE:
                    node = ContinueStatement();
                    break;
                case RETURN:
                    node = ReturnStatement();
                    break;
                case THROW:
                    node = ThrowStatement();
                    break;
                case SYNCHRONIZED:
                    node = SynchronizedStatement();
                    break;
                case TRY:
                    node = TryStatement();
                    break;
                default:
                    jj_la1[86] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LabeledStatementNode LabeledStatement() throws ParseException {
        LabeledStatementNode node = new LabeledStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(IDENTIFIER);
        node.label_d = new Symbol(token.image);
        symbolTable_d.addLabel(node.label_d, node);
        jj_consume_token(COLON);
        node.statement_d = Statement(true);
        if (node.statement_d instanceof LabeledStatementNode) {
            LabeledStatementNode lnode = (LabeledStatementNode) node.statement_d;
            symbolTable_d.addLabel(node.label_d, lnode);            // overwrites
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public BlockNode Block(boolean newScope) throws ParseException {
        StatementNode stmt = null;
        BlockNode node = new BlockNode();
        recordSourceCoord(node, getToken(1));

        // Start a new scope if needed
        if (newScope) {
            scopes_d.pushInteger(counter_d.next());
        }
        jj_consume_token(LBRACE);
        label_40:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BOOLEAN:
                case BREAK:
                case BYTE:
                case CHAR:
                case CONTINUE:
                case DO:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case FOR:
                case IF:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case RETURN:
                case SHORT:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
        ;
                    break;
                default:
                    jj_la1[87] = jj_gen;
                    break label_40;
            }
            stmt = BlockStatement(true);
            node.stmts_d.addElement(stmt);
        }
        jj_consume_token(RBRACE);
        // End this scope
        if (newScope) {
            scopes_d.popInteger();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementNode BlockStatement(boolean newScope) throws ParseException {
        StatementNode node;
        if (jj_2_18(2147483647)) {
            node = LocalVarDeclaration();
            jj_consume_token(SEMICOLON);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case BREAK:
                case CONTINUE:
                case DO:
                case FALSE:
                case FOR:
                case IF:
                case NEW:
                case NULL:
                case RETURN:
                case SUPER:
                case SWITCH:
                case SYNCHRONIZED:
                case THIS:
                case THROW:
                case TRUE:
                case TRY:
                case WHILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case SEMICOLON:
                case INCR:
                case DECR:
                    node = Statement(newScope);
                    break;
                default:
                    jj_la1[88] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementNode LocalVarDeclaration() throws ParseException {
        VariableDeclaratorNode var;
        Integer scope = scopes_d.peekInteger();
        LocalVarDeclarationNode node = new LocalVarDeclarationNode();
        recordSourceCoord(node, getToken(1));
        node.type_d = TypeExp();
        var = VariableDeclarator(false);
        node.locals_d.addElement(var);
        label_41:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[89] = jj_gen;
                    break label_41;
            }
            jj_consume_token(COMMA);
            var = VariableDeclarator(false);
            node.locals_d.addElement(var);
        }
        node.encodeType();
        declareLocalVars(node);                         // add vars to the symbol table
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementNode EmptyStatement() throws ParseException {
        StatementNode node = new EmptyStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(SEMICOLON);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementExpNode StatementExp() throws ParseException {
        StatementExpNode node = new StatementExpNode();
        recordSourceCoord(node, getToken(1));
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INCR:
                node.expression_d = PreIncrementExp();
                break;
            case DECR:
                node.expression_d = PreDecrementExp();
                break;
            default:
                jj_la1[90] = jj_gen;
                if (jj_2_19(2147483647)) {
                    node.expression_d = Assignment();
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case FALSE:
                        case NEW:
                        case NULL:
                        case SUPER:
                        case THIS:
                        case TRUE:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            node.expression_d = PostfixExp();
                            break;
                        default:
                            jj_la1[91] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        if (statementExp(node.expression_d)) {
            node.expression_d.statementExp_d = true;                // for code generation
        } else {
            ErrorMsg error = new ErrorMsg(ErrorMsg.NOTASTME_ERR, node);
            errors_d.addElement(error.toString());
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LabeledStatementNode SwitchStatement() throws ParseException {
        /* 
	 * Wrap a switch statement inside a labeled statement with
	 * a fresh label.
         */
        StatementNode stmt = null;
        SwitchLabelNode switchLabel = null;

        Integer label = labels_d.pushInteger(counter_d.next());
        LabeledStatementNode node = new LabeledStatementNode();
        node.label_d = new Symbol(label.toString());
        SwitchStatementNode snode = new SwitchStatementNode();
        node.statement_d = snode;

        symbolTable_d.addLabel(node.label_d, node);             // add it to the symbol table
        recordSourceCoord(snode, getToken(1));
        jj_consume_token(SWITCH);
        jj_consume_token(LPAREN);
        snode.expression_d = Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_42:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CASE:
                case _DEFAULT:
        ;
                    break;
                default:
                    jj_la1[92] = jj_gen;
                    break label_42;
            }
            switchLabel = SwitchLabel();
            snode.labels_d.addElement(switchLabel);
            label_43:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case BOOLEAN:
                    case BREAK:
                    case BYTE:
                    case CHAR:
                    case CONTINUE:
                    case DO:
                    case DOUBLE:
                    case FALSE:
                    case FLOAT:
                    case FOR:
                    case IF:
                    case INT:
                    case LONG:
                    case NEW:
                    case NULL:
                    case RETURN:
                    case SHORT:
                    case SUPER:
                    case SWITCH:
                    case SYNCHRONIZED:
                    case THIS:
                    case THROW:
                    case TRUE:
                    case TRY:
                    case WHILE:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case IDENTIFIER:
                    case LPAREN:
                    case LBRACE:
                    case SEMICOLON:
                    case INCR:
                    case DECR:
          ;
                        break;
                    default:
                        jj_la1[93] = jj_gen;
                        break label_43;
                }
                stmt = BlockStatement(true);
                switchLabel.statements_d.addElement(stmt);
            }
        }
        jj_consume_token(RBRACE);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public SwitchLabelNode SwitchLabel() throws ParseException {
        SwitchLabelNode node = new SwitchLabelNode();
        recordSourceCoord(node, getToken(1));
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case CASE:
                jj_consume_token(CASE);
                node.expression_d = Expression();
                jj_consume_token(COLON);
                break;
            case _DEFAULT:
                jj_consume_token(_DEFAULT);
                jj_consume_token(COLON);
                break;
            default:
                jj_la1[94] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public IfStatementNode IfStatement() throws ParseException {
        IfStatementNode node = new IfStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        node.condition_d = Expression();
        jj_consume_token(RPAREN);
        node.thenStatement_d = Statement(true);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSE:
                jj_consume_token(ELSE);
                node.elseStatement_d = Statement(true);
                break;
            default:
                jj_la1[95] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LabeledStatementNode WhileStatement() throws ParseException {
        /* 
	 * Wrap a while statement inside a labeled statement with
	 * a fresh label.
         */
        Integer label = labels_d.pushInteger(counter_d.next());
        LabeledStatementNode node = new LabeledStatementNode();
        node.label_d = new Symbol(label.toString());
        WhileStatementNode wnode = new WhileStatementNode();
        node.statement_d = wnode;               // link child

        symbolTable_d.addLabel(node.label_d, node);             // add it to the symbol table
        recordSourceCoord(wnode, getToken(1));
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        wnode.condition_d = Expression();
        jj_consume_token(RPAREN);
        wnode.statement_d = Statement(true);
        labels_d.popInteger();
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LabeledStatementNode DoStatement() throws ParseException {
        /* 
	 * Wrap a do-while statement inside a labeled statement with
	 * a fresh label.
         */
        Integer label = labels_d.pushInteger(counter_d.next());
        LabeledStatementNode node = new LabeledStatementNode();
        node.label_d = new Symbol(label.toString());
        DoStatementNode dnode = new DoStatementNode();
        node.statement_d = dnode;

        symbolTable_d.addLabel(node.label_d, node);             // add it to the symbol table
        recordSourceCoord(dnode, getToken(1));
        jj_consume_token(DO);
        dnode.statement_d = Statement(true);
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        dnode.condition_d = Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
        labels_d.popInteger();
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LabeledStatementNode ForStatement() throws ParseException {
        /* 
	 * Wrap a for statement inside a labeled statement with
	 * a fresh label.
         */
        Integer label = labels_d.pushInteger(counter_d.next());
        LabeledStatementNode node = new LabeledStatementNode();
        node.label_d = new Symbol(label.toString());
        ForStatementNode fnode = new ForStatementNode();
        node.statement_d = fnode;

        symbolTable_d.addLabel(node.label_d, node);             // add it to the symbol table
        recordSourceCoord(fnode, getToken(1));
        jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        scopes_d.pushInteger(counter_d.next());
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
                fnode.init_d = ForInit();
                break;
            default:
                jj_la1[96] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                fnode.bound_d = Expression();
                break;
            default:
                jj_la1[97] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case INCR:
            case DECR:
                fnode.update_d = ForUpdate();
                break;
            default:
                jj_la1[98] = jj_gen;
                ;
        }
        jj_consume_token(RPAREN);
        fnode.statement_d = Statement(false);
        /*
		 * Wrap the update statement exp list using a labeled statement.
         */
        if (fnode.update_d != null) {
            LabeledStatementNode update = new LabeledStatementNode();
            update.label_d = new Symbol(node.label_d, "for");               // for the continue
            update.statement_d = fnode.update_d;
            fnode.update_d = update;
            symbolTable_d.addLabel(update.label_d, update);
        }

        scopes_d.popInteger();
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementNode ForInit() throws ParseException {
        StatementNode node = null;
        if (jj_2_20(2147483647)) {
            node = LocalVarDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case FALSE:
                case NEW:
                case NULL:
                case SUPER:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case INCR:
                case DECR:
                    node = StatementExpList();
                    break;
                default:
                    jj_la1[99] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementExpListNode StatementExpList() throws ParseException {
        StatementExpListNode node = new StatementExpListNode();
        StatementExpNode exp = null;
        recordSourceCoord(node, getToken(1));
        exp = StatementExp();
        node.statementExps_d.addElement(exp);
        label_44:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case COMMA:
        ;
                    break;
                default:
                    jj_la1[100] = jj_gen;
                    break label_44;
            }
            jj_consume_token(COMMA);
            exp = StatementExp();
            node.statementExps_d.addElement(exp);
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementExpListNode ForUpdate() throws ParseException {
        StatementExpListNode node = null;
        node = StatementExpList();
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public BreakStatementNode BreakStatement() throws ParseException {
        BreakStatementNode node = new BreakStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(BREAK);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                node.label_d = new Symbol(token.image);
                break;
            default:
                jj_la1[101] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        if (node.label_d == null) {
            if (labels_d.empty()) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.BREAKNIL_ERR, node);
                errors_d.addElement(error.toString());
            } else {
                // Set the default label to point to the closest loop.
                node.label_d = new Symbol(labels_d.peekInteger().toString());
            }
        } else if (symbolTable_d.lookupLabel(node.label_d) == null) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.UNDEFLBL_ERR, node);
            errors_d.addElement(error.toString(node.label_d.toString()));
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public StatementNode ContinueStatement() throws ParseException {
        ContinueStatementNode node = new ContinueStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(CONTINUE);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case IDENTIFIER:
                jj_consume_token(IDENTIFIER);
                node.label_d = new Symbol(token.image);
                break;
            default:
                jj_la1[102] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        if (node.label_d == null) {
            if (labels_d.empty()) {
                ErrorMsg error = new ErrorMsg(ErrorMsg.CONTINIL_ERR, node);
                errors_d.addElement(error.toString());
            } else {
                // Set the default label to point to the closest loop.
                node.label_d = new Symbol(labels_d.peekInteger().toString());
            }
        } else if (symbolTable_d.lookupLabel(node.label_d) == null) {
            ErrorMsg error = new ErrorMsg(ErrorMsg.UNDEFLBL_ERR, node);
            errors_d.addElement(error.toString(node.label_d.toString()));
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ReturnStatementNode ReturnStatement() throws ParseException {
        ReturnStatementNode node = new ReturnStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(RETURN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FALSE:
            case NEW:
            case NULL:
            case SUPER:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                node.expression_d = Expression();
                break;
            default:
                jj_la1[103] = jj_gen;
                ;
        }
        jj_consume_token(SEMICOLON);
        node.fetchResultType(methodName_d, symbolTable_d);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ThrowStatementNode ThrowStatement() throws ParseException {
        ThrowStatementNode node = new ThrowStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(THROW);
        node.expression_d = Expression();
        jj_consume_token(SEMICOLON);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public SynchronizedStatementNode SynchronizedStatement() throws ParseException {
        SynchronizedStatementNode node = new SynchronizedStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(SYNCHRONIZED);
        jj_consume_token(LPAREN);
        node.expression_d = Expression();
        jj_consume_token(RPAREN);
        node.block_d = Block(true);
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public LocalVarDeclarationNode CatchParameter() throws ParseException {
        VariableDeclaratorNode var = new VariableDeclaratorNode(false);
        Symbol name;
        Integer scope = scopes_d.peekInteger();
        LocalVarDeclarationNode node = new LocalVarDeclarationNode();

        // Add source code info for error reporting
        recordSourceCoord(var, getToken(1));
        recordSourceCoord(node, getToken(1));
        node.type_d = TypeExp();
        name = VariableDeclaratorId();
        var.name_d = new Symbol(className_d, name);

        node.locals_d.addElement(var);

        node.encodeType();
        declareLocalVars(node);

        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public TryStatementNode TryStatement() throws ParseException {
        BlockNode catchblock = null;
        LocalVarDeclarationNode formal = null;
        TryStatementNode node = new TryStatementNode();
        recordSourceCoord(node, getToken(1));
        jj_consume_token(TRY);
        node.tryBlock_d = Block(true);
        label_45:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CATCH:
        ;
                    break;
                default:
                    jj_la1[104] = jj_gen;
                    break label_45;
            }
            jj_consume_token(CATCH);
            scopes_d.pushInteger(counter_d.next());                 // start scope

            jj_consume_token(LPAREN);
            formal = CatchParameter();
            jj_consume_token(RPAREN);
            node.formals_d.addElement(formal);
            catchblock = Block(true);
            node.catchBlocks_d.addElement(catchblock);
            scopes_d.popInteger();                                              // end scope

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case FINALLY:
                jj_consume_token(FINALLY);
                node.finallyBlock_d = Block(true);
                break;
            default:
                jj_la1[105] = jj_gen;
                ;
        }
        {
            if (true) {
                return node;
            }
        }
        throw new Error("Missing return statement in function");
    }

    final private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_1();
        jj_save(0, xla);
        return retval;
    }

    final private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_2();
        jj_save(1, xla);
        return retval;
    }

    final private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_3();
        jj_save(2, xla);
        return retval;
    }

    final private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_4();
        jj_save(3, xla);
        return retval;
    }

    final private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_5();
        jj_save(4, xla);
        return retval;
    }

    final private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_6();
        jj_save(5, xla);
        return retval;
    }

    final private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_7();
        jj_save(6, xla);
        return retval;
    }

    final private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_8();
        jj_save(7, xla);
        return retval;
    }

    final private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_9();
        jj_save(8, xla);
        return retval;
    }

    final private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_10();
        jj_save(9, xla);
        return retval;
    }

    final private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_11();
        jj_save(10, xla);
        return retval;
    }

    final private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_12();
        jj_save(11, xla);
        return retval;
    }

    final private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_13();
        jj_save(12, xla);
        return retval;
    }

    final private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_14();
        jj_save(13, xla);
        return retval;
    }

    final private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_15();
        jj_save(14, xla);
        return retval;
    }

    final private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_16();
        jj_save(15, xla);
        return retval;
    }

    final private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_17();
        jj_save(16, xla);
        return retval;
    }

    final private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_18();
        jj_save(17, xla);
        return retval;
    }

    final private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_19();
        jj_save(18, xla);
        return retval;
    }

    final private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        boolean retval = !jj_3_20();
        jj_save(19, xla);
        return retval;
    }

    final private boolean jj_3R_156() {
        if (jj_scan_token(HOOK)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_134()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_147() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_69() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_142() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_147()) {
            jj_scanpos = xsp;
            if (jj_3R_148()) {
                jj_scanpos = xsp;
                if (jj_3R_149()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_51() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_69()) {
            jj_scanpos = xsp;
            if (jj_3R_70()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_134() {
        if (jj_3R_144()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_156()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_90() {
        if (jj_scan_token(XORASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_89() {
        if (jj_scan_token(ANDASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_88() {
        if (jj_scan_token(ORASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_87() {
        if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_86() {
        if (jj_scan_token(RSIGNEDSHIFTASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_85() {
        if (jj_scan_token(LSHIFTASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_63() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_84() {
        if (jj_scan_token(MINUSASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_83() {
        if (jj_scan_token(PLUSASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_82() {
        if (jj_scan_token(REMASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_78() {
        if (jj_3R_123()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_124()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_81() {
        if (jj_scan_token(SLASHASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_80() {
        if (jj_scan_token(STARASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_121() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_79() {
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_120() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_54() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_79()) {
            jj_scanpos = xsp;
            if (jj_3R_80()) {
                jj_scanpos = xsp;
                if (jj_3R_81()) {
                    jj_scanpos = xsp;
                    if (jj_3R_82()) {
                        jj_scanpos = xsp;
                        if (jj_3R_83()) {
                            jj_scanpos = xsp;
                            if (jj_3R_84()) {
                                jj_scanpos = xsp;
                                if (jj_3R_85()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_86()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_87()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_88()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_89()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_90()) {
                                                        return true;
                                                    }
                                                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                                        return false;
                                                    }
                                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                                    return false;
                                                }
                                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                                return false;
                                            }
                                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                            return false;
                                        }
                                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                        return false;
                                    }
                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_77() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_122()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_76() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_121()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_75() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_120()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_119() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_58() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(COLON)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_133() {
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_54()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_9() {
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_54()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_218() {
        if (jj_scan_token(DECR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_215() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_130() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_102() {
        if (jj_3R_134()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_101() {
        if (jj_3R_133()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_74() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_119()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_57() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_101()) {
            jj_scanpos = xsp;
            if (jj_3R_102()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_118() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_129() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_73() {
        if (jj_3R_117()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_118()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_53() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_73()) {
            jj_scanpos = xsp;
            if (jj_3R_74()) {
                jj_scanpos = xsp;
                if (jj_3R_75()) {
                    jj_scanpos = xsp;
                    if (jj_3R_76()) {
                        jj_scanpos = xsp;
                        if (jj_3R_77()) {
                            jj_scanpos = xsp;
                            if (jj_3R_78()) {
                                return true;
                            }
                            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_217() {
        if (jj_scan_token(INCR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_214() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_217()) {
            jj_scanpos = xsp;
            if (jj_3R_218()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_128() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_17() {
        if (jj_3R_58()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_216() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_151() {
        if (jj_3R_116()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_127() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_213() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_135()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_216()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_201()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_13() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_56()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_215()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_16() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_211() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_13()) {
            jj_scanpos = xsp;
            if (jj_3R_213()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_126() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_135() {
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_132() {
        if (jj_3R_117()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_125() {
        if (jj_scan_token(TILDE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_15() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_150() {
        Token xsp;
        if (jj_3_15()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_15()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_16()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_152() {
        if (jj_3R_150()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_131() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_212() {
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_214()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_12() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_8() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_49() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_8()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_92() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_125()) {
            jj_scanpos = xsp;
            if (jj_3R_126()) {
                jj_scanpos = xsp;
                if (jj_3R_127()) {
                    jj_scanpos = xsp;
                    if (jj_3R_128()) {
                        jj_scanpos = xsp;
                        if (jj_3R_129()) {
                            jj_scanpos = xsp;
                            if (jj_3R_130()) {
                                jj_scanpos = xsp;
                                if (jj_3R_131()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_132()) {
                                        return true;
                                    }
                                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                        return false;
                                    }
                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_5() {
        if (jj_3R_50()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_91() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_111() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_143() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_135()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_151()) {
            jj_scanpos = xsp;
            if (jj_3R_152()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_11() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_56()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_55() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_11()) {
            jj_scanpos = xsp;
            if (jj_3R_91()) {
                jj_scanpos = xsp;
                if (jj_3R_92()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_14() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_56()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_150()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_105() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_123() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_14()) {
            jj_scanpos = xsp;
            if (jj_3R_143()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_210() {
        if (jj_scan_token(TILDE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_115() {
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_68() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_114()) {
            jj_scanpos = xsp;
            if (jj_3R_115()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_114() {
        if (jj_scan_token(VOID)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_110() {
        if (jj_scan_token(ABSTRACT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_164() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_209() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_100() {
        if (jj_scan_token(DOUBLE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_99() {
        if (jj_scan_token(FLOAT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_161() {
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_164()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_98() {
        if (jj_scan_token(LONG)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_109() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_97() {
        if (jj_scan_token(INT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_158() {
        if (jj_3R_161()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_96() {
        if (jj_scan_token(SHORT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_10() {
        if (jj_3R_55()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_95() {
        if (jj_scan_token(BYTE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_94() {
        if (jj_scan_token(CHAR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_116() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_158()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_93() {
        if (jj_scan_token(BOOLEAN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_56() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_93()) {
            jj_scanpos = xsp;
            if (jj_3R_94()) {
                jj_scanpos = xsp;
                if (jj_3R_95()) {
                    jj_scanpos = xsp;
                    if (jj_3R_96()) {
                        jj_scanpos = xsp;
                        if (jj_3R_97()) {
                            jj_scanpos = xsp;
                            if (jj_3R_98()) {
                                jj_scanpos = xsp;
                                if (jj_3R_99()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_100()) {
                                        return true;
                                    }
                                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                        return false;
                                    }
                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_20() {
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_208() {
        if (jj_3R_212()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_108() {
        if (jj_scan_token(PRIVATE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_207() {
        if (jj_3R_211()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_146() {
        if (jj_scan_token(NULL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_206() {
        if (jj_3R_210()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_66() {
        if (jj_scan_token(PRIVATE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_205() {
        if (jj_3R_209()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_104() {
        if (jj_3R_56()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_201() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_205()) {
            jj_scanpos = xsp;
            if (jj_3R_206()) {
                jj_scanpos = xsp;
                if (jj_3R_207()) {
                    jj_scanpos = xsp;
                    if (jj_3R_208()) {
                        return true;
                    }
                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_155() {
        if (jj_scan_token(FALSE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_103() {
        if (jj_3R_135()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_113() {
        if (jj_scan_token(SYNCHRONIZED)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_145() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_154()) {
            jj_scanpos = xsp;
            if (jj_3R_155()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_154() {
        if (jj_scan_token(TRUE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_59() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_103()) {
            jj_scanpos = xsp;
            if (jj_3R_104()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_105()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_107() {
        if (jj_scan_token(PROTECTED)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_200() {
        if (jj_scan_token(DECR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_65() {
        if (jj_scan_token(PROTECTED)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_141() {
        if (jj_3R_146()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_140() {
        if (jj_3R_145()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_112() {
        if (jj_scan_token(NATIVE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_67() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_106()) {
            jj_scanpos = xsp;
            if (jj_3R_107()) {
                jj_scanpos = xsp;
                if (jj_3R_108()) {
                    jj_scanpos = xsp;
                    if (jj_3R_109()) {
                        jj_scanpos = xsp;
                        if (jj_3R_110()) {
                            jj_scanpos = xsp;
                            if (jj_3R_111()) {
                                jj_scanpos = xsp;
                                if (jj_3R_112()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_113()) {
                                        return true;
                                    }
                                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                        return false;
                                    }
                                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                    return false;
                                }
                            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_106() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_199() {
        if (jj_scan_token(INCR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_50() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_67()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        if (jj_3R_68()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_139() {
        if (jj_scan_token(STRING_LITERAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_198() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_4() {
        if (jj_3R_50()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_64() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_48() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_64()) {
            jj_scanpos = xsp;
            if (jj_3R_65()) {
                jj_scanpos = xsp;
                if (jj_3R_66()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_3() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_48()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_49()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_47() {
        if (jj_scan_token(STATIC)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_63()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_138() {
        if (jj_scan_token(CHARACTER_LITERAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_197() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_2() {
        if (jj_3R_47()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_72() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_116()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_193() {
        if (jj_3R_201()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_71() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_116()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_192() {
        if (jj_3R_200()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_52() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_71()) {
            jj_scanpos = xsp;
            if (jj_3R_72()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_191() {
        if (jj_3R_199()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_190() {
        if (jj_3R_198()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_189() {
        if (jj_3R_197()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_137() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_184() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_189()) {
            jj_scanpos = xsp;
            if (jj_3R_190()) {
                jj_scanpos = xsp;
                if (jj_3R_191()) {
                    jj_scanpos = xsp;
                    if (jj_3R_192()) {
                        jj_scanpos = xsp;
                        if (jj_3R_193()) {
                            return true;
                        }
                        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_204() {
        if (jj_scan_token(REM)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_7() {
        if (jj_3R_52()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_203() {
        if (jj_scan_token(SLASH)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_202() {
        if (jj_scan_token(STAR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_194() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_202()) {
            jj_scanpos = xsp;
            if (jj_3R_203()) {
                jj_scanpos = xsp;
                if (jj_3R_204()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_178() {
        if (jj_3R_184()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_194()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_62() {
        if (jj_scan_token(PUBLIC)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_61() {
        if (jj_scan_token(FINAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_196() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_195() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_185() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_195()) {
            jj_scanpos = xsp;
            if (jj_3R_196()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_178()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_176() {
        if (jj_3R_178()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_185()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_46() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_60()) {
            jj_scanpos = xsp;
            if (jj_3R_61()) {
                jj_scanpos = xsp;
                if (jj_3R_62()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_60() {
        if (jj_scan_token(ABSTRACT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_1() {
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_46()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        if (jj_scan_token(CLASS)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_188() {
        if (jj_scan_token(RUNSIGNEDSHIFT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_187() {
        if (jj_scan_token(RSIGNEDSHIFT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_186() {
        if (jj_scan_token(LSHIFT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_179() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_186()) {
            jj_scanpos = xsp;
            if (jj_3R_187()) {
                jj_scanpos = xsp;
                if (jj_3R_188()) {
                    return true;
                }
                if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_176()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_172() {
        if (jj_3R_176()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_179()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_183() {
        if (jj_scan_token(GE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_182() {
        if (jj_scan_token(LE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_181() {
        if (jj_scan_token(GT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_180() {
        if (jj_scan_token(LT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_177() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_180()) {
            jj_scanpos = xsp;
            if (jj_3R_181()) {
                jj_scanpos = xsp;
                if (jj_3R_182()) {
                    jj_scanpos = xsp;
                    if (jj_3R_183()) {
                        return true;
                    }
                    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_172()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_170() {
        if (jj_3R_172()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_177()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_136() {
        if (jj_scan_token(INTEGER_LITERAL)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_117() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_136()) {
            jj_scanpos = xsp;
            if (jj_3R_137()) {
                jj_scanpos = xsp;
                if (jj_3R_138()) {
                    jj_scanpos = xsp;
                    if (jj_3R_139()) {
                        jj_scanpos = xsp;
                        if (jj_3R_140()) {
                            jj_scanpos = xsp;
                            if (jj_3R_141()) {
                                return true;
                            }
                            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                                return false;
                            }
                        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                            return false;
                        }
                    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                        return false;
                    }
                } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                    return false;
                }
            } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_173() {
        if (jj_scan_token(INSTANCEOF)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_168() {
        if (jj_3R_170()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_173()) {
            jj_scanpos = xsp;
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_175() {
        if (jj_scan_token(NE)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_174() {
        if (jj_scan_token(EQ)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_171() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_174()) {
            jj_scanpos = xsp;
            if (jj_3R_175()) {
                return true;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        } else if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_168()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_166() {
        if (jj_3R_168()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_171()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_169() {
        if (jj_scan_token(BIT_AND)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_166()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_19() {
        if (jj_3R_53()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_54()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_163() {
        if (jj_3R_166()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_169()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_167() {
        if (jj_scan_token(XOR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_163()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_160() {
        if (jj_3R_163()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_167()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_149() {
        if (jj_3R_116()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_165() {
        if (jj_scan_token(BIT_OR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_160()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_157() {
        if (jj_3R_160()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_165()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_162() {
        if (jj_scan_token(SC_AND)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_157()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_153() {
        if (jj_3R_157()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_162()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_159() {
        if (jj_scan_token(SC_OR)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_153()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_144() {
        if (jj_3R_153()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_159()) {
                jj_scanpos = xsp;
                break;
            }
            if (jj_la == 0 && jj_scanpos == jj_lastpos) {
                return false;
            }
        }
        return false;
    }

    final private boolean jj_3R_122() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_124() {
        if (jj_3R_142()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_18() {
        if (jj_3R_59()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_70() {
        if (jj_3R_57()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3_6() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_3R_51()) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    final private boolean jj_3R_148() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            return false;
        }
        return false;
    }

    public JavaParserTokenManager token_source;
    ASCII_UCodeESC_CharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[106];
    final private int[] jj_la1_0 = {0x0, 0x0, 0x2010200, 0x0, 0x200, 0x2000200, 0x2000200, 0x800000, 0x80000000, 0xa209600, 0xa209400, 0x2000200, 0x2000200, 0x200, 0x200, 0x800000, 0xa209600, 0xa209400, 0x2000000, 0x2000000, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x1000000, 0x2000200, 0x2000200, 0x0, 0x0, 0x0, 0x0, 0x8209400, 0x0, 0x0, 0x0, 0x59349c00, 0x0, 0x8209400, 0x0, 0x8209400, 0x8209400, 0x0, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x1000000, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x51140800, 0x59349c00, 0x51140800, 0x0, 0x0, 0x1000000, 0x82000, 0x59349c00, 0x82000, 0x400000, 0x9209400, 0x1000000, 0x1000000, 0x1000000, 0x0, 0x0, 0x0, 0x1000000, 0x4000, 0x4000000,};
    final private int[] jj_la1_1 = {0x100, 0x1, 0x808, 0x0, 0x808, 0x800, 0x800, 0x0, 0x0, 0x3226e34, 0x2206e14, 0x24e20, 0x24e20, 0x800, 0x800, 0x0, 0x3226e34, 0x2206e14, 0x2204e00, 0x2204e00, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x884480c0, 0x24e20, 0x24e20, 0x100000, 0x0, 0x0, 0x0, 0x2014, 0xe00, 0xe00, 0x100000, 0x8ccfb0d4, 0x48000, 0x2014, 0x0, 0x2014, 0x1002014, 0x0, 0x884480c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x884480c0, 0x884480c0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x88400080, 0x400000, 0x884480c0, 0x0, 0x0, 0x40, 0x8ccf90c0, 0x8ccfb0d4, 0x8ccf90c0, 0x0, 0x0, 0x884480c0, 0x0, 0x8ccfb0d4, 0x0, 0x0, 0x8844a0d4, 0x884480c0, 0x884480c0, 0x884480c0, 0x0, 0x0, 0x0, 0x884480c0, 0x0, 0x0,};
    final private int[] jj_la1_2 = {0x0, 0x0, 0x1000, 0x4000, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x0, 0x0, 0x2000, 0x8000, 0x400, 0xf00c014e, 0x2000, 0xf00c014e, 0x0, 0x0, 0x0, 0x1100, 0x400, 0x2000, 0x8, 0x0, 0x0, 0x0, 0x3000114e, 0x0, 0x8, 0x400, 0x0, 0x8, 0x2000, 0xf00c004e, 0x8000, 0x100000, 0x4000000, 0x8000000, 0x0, 0x0, 0x0, 0x2400000, 0x2400000, 0x0, 0x1830000, 0x1830000, 0x0, 0x0, 0xc0000000, 0xc0000000, 0x0, 0x0, 0xf00c004e, 0xc0000, 0x4e, 0xc004e, 0x40, 0x30000000, 0x30000000, 0x400, 0x400, 0x40, 0x4440, 0x4440, 0x4440, 0x4440, 0x4440, 0x4440, 0x4e, 0x4440, 0x6, 0x0, 0xf00c004e, 0x2000, 0x440, 0x0, 0x3000114e, 0x3000114e, 0x3000114e, 0x2000, 0x30000000, 0x4e, 0x0, 0x3000114e, 0x0, 0x0, 0x3000004e, 0xf00c004e, 0x3000004e, 0x3000004e, 0x2000, 0x8, 0x8, 0xf00c004e, 0x0, 0x0,};
    final private int[] jj_la1_3 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xffe00, 0x0, 0x0, 0x0, 0x8, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1c0, 0x1c0, 0x0, 0x0, 0x23, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,};
    final private JJJavaParserCalls[] jj_2_rtns = new JJJavaParserCalls[20];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public JavaParser(java.io.InputStream stream) {
        jj_input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 106; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJJavaParserCalls();
        }
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 106; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJJavaParserCalls();
        }
    }

    public JavaParser(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 106; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJJavaParserCalls();
        }
    }

    public void ReInit(JavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 106; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJJavaParserCalls();
        }
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJJavaParserCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        return (jj_scanpos.kind != kind);
    }

    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    }
                    if (exists) {
                        break;
                    }
                }
            }
            if (!exists) {
                jj_expentries.addElement(jj_expentry);
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    final public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[116];
        for (int i = 0; i < 116; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 106; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 116; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

    final private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 20; i++) {
            JJJavaParserCalls p = jj_2_rtns[i];
            do {
                if (p.gen > jj_gen) {
                    jj_la = p.arg;
                    jj_lastpos = jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            jj_3_1();
                            break;
                        case 1:
                            jj_3_2();
                            break;
                        case 2:
                            jj_3_3();
                            break;
                        case 3:
                            jj_3_4();
                            break;
                        case 4:
                            jj_3_5();
                            break;
                        case 5:
                            jj_3_6();
                            break;
                        case 6:
                            jj_3_7();
                            break;
                        case 7:
                            jj_3_8();
                            break;
                        case 8:
                            jj_3_9();
                            break;
                        case 9:
                            jj_3_10();
                            break;
                        case 10:
                            jj_3_11();
                            break;
                        case 11:
                            jj_3_12();
                            break;
                        case 12:
                            jj_3_13();
                            break;
                        case 13:
                            jj_3_14();
                            break;
                        case 14:
                            jj_3_15();
                            break;
                        case 15:
                            jj_3_16();
                            break;
                        case 16:
                            jj_3_17();
                            break;
                        case 17:
                            jj_3_18();
                            break;
                        case 18:
                            jj_3_19();
                            break;
                        case 19:
                            jj_3_20();
                            break;
                    }
                }
                p = p.next;
            } while (p != null);
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla) {
        JJJavaParserCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJJavaParserCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

}

final class JJJavaParserCalls {

    int gen;
    Token first;
    int arg;
    JJJavaParserCalls next;
}
