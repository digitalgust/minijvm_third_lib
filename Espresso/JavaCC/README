README file for Java Compiler Compiler (JavaCC), Version 0.7

This file is part of the JavaCC system release that you must have
downloaded from http://www.suntest.com.

In addition to this, there are two other subsystems you must download
for the complete system:

1. The documentation pages
2. The FAQ pages

Both (1) and (2) are accessible on the web at the same location
(http://www.suntest.com/JavaCC/), but downloading them allows you to
store these web pages locally, thereby giving you faster (actually
immediate) access.

It is a good idea to visit (and re-download) these pages maybe once
each month to ensure that you always have a recent version.  We intend
to keep improving these pages over time.

----------------------------------------------------------------------

Directory organization and other files to read after you read this file:

README
	This file
COPYRIGHT
	The copyright and license agreement that you accepted when
	you downloaded JavaCC.
JavaCC.zip
	All the Java class files that comprise JavaCC, JJTree, and JJDoc.
doc/README
	A summary of what is available in this directory.
doc/INSTALLATIONNOTES
	Contains installation tips.
doc/javacc.RELEASENOTES
	If you know how to use Version 0.6 of JavaCC, this file will
	quickly get you uptodate with the new features and tips on
	how to use them.
doc/javacc.DETAILEDNOTES
	Complete details of everything that has changed since Version
	0.5.  This is useful for an in-depth understanding of how the
	new version has changed.
doc/jjtree.RELEASENOTES
	Rough initial documentation for the tree building pre-processor
	called JJTree.
doc/jjdoc.RELEASENOTES
	Documentation for JJDoc, the tool that generates documents
	(such as HTML) from JavaCC grammar files.
examples/
	This is a directory containing a large number of examples.  See
	the file README in this directory for a road map.  Many examples
	have comprehensive README files to act as a tutorial.
src/
	The Java source files for the main programs that are used to
	invoke JavaCC, JJTree, and JJDoc.

----------------------------------------------------------------------

A high level overview of the features follows:

. 100% PURE JAVA (hence portable): JavaCC is certified 100% PURE JAVA.
  This means JavaCC can run on any Java compliant platform version
  1.0.2 or later.  JavaCC has been successfully used on over 40
  different hardware/software platforms.

. IMPROVED PERFORMANCE: JavaCC Version 0.7 runs significantly faster
  and requires much less space than the earlier versions.  

. ROBUSTIZATION: Our estimates are that we have a few thousand
  serious users of JavaCC working on a wide variety of hardware and
  software combinations.  Over hundreds of email interactions, we
  have been able to mature the tool to the next level.

. TREE BUILDING PREPROCESSOR: JavaCC comes with a tree building
  pre-processor called JJTree.  JJTree is now very much enhanced from
  the 0.6 days - it now bootstraps itself and we can now focus more on
  quality in addition to functionality.  If you have used JJTree in
  the 0.6 days, you will see a significant improvement in quality of
  generated code now.

. DOCUMENTATION GENERATION: A translator that converts grammar files
  to documentation files (optionally in html) is now an integral part
  of the JavaCC release.  This translator is called JJDoc.

. MANY EXAMPLES: Version 0.7 comes with many examples including
  Java 1.1 and HTML grammars.  There are also examples over a wide
  range of complexity to help you get acquainted with JavaCC.

. THIRD PARTY CONTRIBUTIONS: We are beginning to see many third party
  contributions that are being distributed either directly or through
  our web site.  We expect this trend to grow significantly now.

. SEMANTIC LOOKAHEAD: The ability to control parsing choices by using
  arbitrary boolean expressions.  The real nice aspect of JavaCC's
  semantic lookahead is that it is even evaluated while making
  lookahead decisions at earlier choice points.  Semantic lookahead
  specifications may be placed anywhere in the grammar just like
  actions.

. LEXICAL STATES AND LEXICAL ACTIONS: JavaCC offers "lex" like lexical
  state and lexical action capabilities.  Specific aspects in JavaCC
  that improve over other tools are the first class status it offers
  concepts such as TOKEN, MORE, SKIP, state changes, etc.  This allows
  cleaner specifications as well as better error and warning messages
  from JavaCC.

. CASE-INSENSITIVE LEXICAL ANALYSIS: Lexical specifications can define
  tokens not to be case sensitive either at the global level for the
  entire lexical specification, or on an individual lexical
  specification basis.

. EXTENSIVE DEBUGGING CAPABILITIES: Using the options DEBUG_PARSER,
  DEBUG_TOKEN_MANAGER, and DEBUG_LOOKAHEAD, you can find out
  everything you need to know in order to correct mistakes in your
  grammars.

. SPECIAL TOKENS: Tokens that are defined as special tokens in the
  lexical specification are ignored during parsing, but these tokens
  are available for processing by the tools.  A useful application of
  this is in the processing of comments.

. ERROR REPORTING AND RECOVERY: JavaCC offers constructs for user
  specified error reporting and recovery.  The standard error
  reporting scheme follows Java schemes of incorporating the error
  information into an exception.  Automatic error recovery is planned
  for a future release.

. FORMAL CUSTOMER SUPPORT: We offer formal customer support for a fee
  (see our web pages) for those who need it.  Informal customer
  support in the form of mailing lists, faqs, etc. is also available
  and there are many users building commercial systems relying solely
  on this informal support.
