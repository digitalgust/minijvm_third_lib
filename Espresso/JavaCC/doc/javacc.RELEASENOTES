THIS IS THE RELEASE NOTES FOR JAVACC VERSION 0.7.  THIS IS A CONCISE
DESCRIPTION OF ALL CHANGES BETWEEN VERSION 0.6 AND VERSION 0.7.

FOR A COMPLETE SET OF RELEASE NOTES THAT GOES INTO FULL DETAILS OF
EVERYTHING THAT HAS HAPPENED SINCE VERSION 0.5, PLEASE SEE FILE
javacc.DETAILEDNOTES.

-------------------------------------------------------------------
CHANGES BETWEEN VERSIONS 0.6.1 AND 0.7:
-------------------------------------------------------------------

A newsgroup comp.compilers.tools.javacc has been formed.  The JavaCC
developers have left Sun to form a Java developer products company
called Metamata (http://www.metamata.com).  The mailing lists have
therefore been moved to metamata.com from asap.eng.sun.com.  Please
see the web pages for more information on the mailing list.

-------------------------------------------------------------------

Added an option CACHE_TOKENS with a default value of false.  You
can generate slightly faster and (it so happens) more compact
parsers if you set CACHE_TOKENS to true.

-------------------------------------------------------------------

Extended the generated CharStream classes with a method to adjust the
line and column numbers for the beginning of a token.  Look at the C++
grammar in the distribution to see an example usage.

-------------------------------------------------------------------

Fixed the JavaCC front-end so that error messages are given with line
numbers relative to the original .jjt file if the .jj file is generated
by pre-processing using jjtree.

-------------------------------------------------------------------

Removed support for old deprecated features:

. IGNORE_IN_BNF can no longer be used.  Until this version, you
  would get a deprecated warning message if you did use it.

. The extra {} in TOKEN specifications can no longer be used.  Until
  this version, you would get a deprecated warning message if your
  did use it.

-------------------------------------------------------------------

The Java 1.1 grammar was corrected to allow interfaces nested within
blocks.  The JavaCC grammar was corrected to fix a bug in its
handling of the ">>>=" operator.

-------------------------------------------------------------------

JJTree has now been bootstrapped using itself.  It has matured
significantly since Version 0.6.  Please refer the the JJTree
release notes for more information.

-------------------------------------------------------------------

The JavaCC+JJTree grammar is now being offered to our users.  You
can find it in the examples directory.

-------------------------------------------------------------------

Created an alternate Java 1.1 grammar in which lookaheads have been
modified to minimize the space requirements of the generated
parser.  See the JavaGrammars directory under the examples directory.

-------------------------------------------------------------------

Provided instructions on how you can make your own grammars space
efficient (until JavaCC is improved to do this).  See the
JavaGrammars directory under the examples directory.

-------------------------------------------------------------------

The Java grammar has been incorporated into the JavaCC grammar.
Therefore JavaCC can now understand actions and declarations in
a more intelligent manner and in some cases, perform some
processing.

-------------------------------------------------------------------

Fixed the JavaCC license agreement to allow redistributions of example
grammars (see http:/www.suntest.com/JavaCC/javaccdownload.html).

-------------------------------------------------------------------

A new option OPTIMIZE_TOKEN_MANAGER is introduced. It defaults to
true.  When this option is set, optimizations for the TokenManager, in
terms of size *and* time are performed.

This option is automatically set to false if DEBUG_TOKEN_MANAGER is
set to true.

-------------------------------------------------------------------

A String-valued option OUTPUT_DIRECTORY is implemented. This can be
used to instruct JavaCC to generate all the code files in a particular
directory.  By default, this is set to user.dir.

-------------------------------------------------------------------

Added a toString method to the Token class to return the image.

-------------------------------------------------------------------

Extended the Token class to introduce a new factory function that
takes the token kind and returns a new Token object. This is done to
facilitate creating Objects of subclasses of Token based on the kind.
Look at the generated file Token.java for more details.

-------------------------------------------------------------------

The restriction on the input size (to be < 2 gbytes) for the token
manager is gone.  Now the lexer can tokenize any size input (no
limit).

-------------------------------------------------------------------

Fixed a very old problem with giving input from System.in. Previously
for the EOF, you needed to give  or  more than once. But now it is
not required any more.

-------------------------------------------------------------------

Error recovery constructs have been added.  Please see the web
documentation for more details.

-------------------------------------------------------------------

Two new exceptions have been added - TokenMgrError for token manager
errors and ParseException for parser errors.  The exception ParseError
is gone.

-------------------------------------------------------------------

The previous scheme for customization of error messages is gone.  The
previous scheme required you to subclass the parser and/or the token
manager to customize error messages.  Now you have to modify the
method "getMessage" within the class ParseException.

-------------------------------------------------------------------

Added a method generateParseException to facilitate error recovery.

-------------------------------------------------------------------
